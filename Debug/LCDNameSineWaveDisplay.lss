
LCDNameSineWaveDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002748  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002748  000027bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f50  00000000  00000000  000027cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d27  00000000  00000000  0000471c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005443  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000055a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007777  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000097fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000997c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 92 11 	call	0x2324	; 0x2324 <main>
      7a:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 87 13 	jmp	0x270e	; 0x270e <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 73 13 	jmp	0x26e6	; 0x26e6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	66 e6       	ldi	r22, 0x66	; 102
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 8f 13 	jmp	0x271e	; 0x271e <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 93 13 	jmp	0x2726	; 0x2726 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 97 13 	jmp	0x272e	; 0x272e <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <MDIO_IntialPins>:
#include "STD_TYPES.h"

/* Set Intial Direction Function */

void MDIO_IntialPins(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62

	PRIVATE_DDRA_REG = PRIVATE_CONC(MDIO_PA7_A_DIR,
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	80 83       	st	Z, r24
									MDIO_PA3_A_DIR,
									MDIO_PA2_A_DIR,
									MDIO_PA1_A_DIR,
									MDIO_PA0_A_DIR);

	PRIVATE_DDRB_REG = PRIVATE_CONC(MDIO_PA7_B_DIR,
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8f ef       	ldi	r24, 0xFF	; 255
     ca4:	80 83       	st	Z, r24
									MDIO_PA4_B_DIR,
									MDIO_PA3_B_DIR,
									MDIO_PA2_B_DIR,
									MDIO_PA1_B_DIR,
									MDIO_PA0_B_DIR);
	PRIVATE_DDRC_REG = PRIVATE_CONC(MDIO_PA7_C_DIR,
     ca6:	e4 e3       	ldi	r30, 0x34	; 52
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	80 83       	st	Z, r24
									MDIO_PA4_C_DIR,
									MDIO_PA3_C_DIR,
									MDIO_PA2_C_DIR,
									MDIO_PA1_C_DIR,
									MDIO_PA0_C_DIR);
	PRIVATE_DDRD_REG = PRIVATE_CONC(MDIO_PA7_D_DIR,
     cae:	e1 e3       	ldi	r30, 0x31	; 49
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
									MDIO_PA3_D_DIR,
									MDIO_PA2_D_DIR,
									MDIO_PA1_D_DIR,
									MDIO_PA0_D_DIR);

	PRIVATE_PORTA_REG = PRIVATE_CONC(MDIO_PA7_A_INIT_VALUE,
     cb6:	eb e3       	ldi	r30, 0x3B	; 59
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	10 82       	st	Z, r1
									 MDIO_PA3_A_INIT_VALUE,
									 MDIO_PA2_A_INIT_VALUE,
									 MDIO_PA1_A_INIT_VALUE,
									 MDIO_PA0_A_INIT_VALUE);

	PRIVATE_PORTB_REG = PRIVATE_CONC(MDIO_PA7_B_INIT_VALUE,
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	10 82       	st	Z, r1
									 MDIO_PA3_B_INIT_VALUE,
									 MDIO_PA2_B_INIT_VALUE,
									 MDIO_PA1_B_INIT_VALUE,
									 MDIO_PA0_B_INIT_VALUE);

	PRIVATE_PORTC_REG = PRIVATE_CONC(MDIO_PA7_C_INIT_VALUE,
     cc2:	e5 e3       	ldi	r30, 0x35	; 53
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	10 82       	st	Z, r1
									 MDIO_PA3_C_INIT_VALUE,
									 MDIO_PA2_C_INIT_VALUE,
									 MDIO_PA1_C_INIT_VALUE,
									 MDIO_PA0_C_INIT_VALUE);

	PRIVATE_PORTD_REG = PRIVATE_CONC(MDIO_PA7_D_INIT_VALUE,
     cc8:	e2 e3       	ldi	r30, 0x32	; 50
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	10 82       	st	Z, r1
									 MDIO_PA4_D_INIT_VALUE,
									 MDIO_PA3_D_INIT_VALUE,
									 MDIO_PA2_D_INIT_VALUE,
									 MDIO_PA1_D_INIT_VALUE,
									 MDIO_PA0_D_INIT_VALUE);
}
     cce:	cf 91       	pop	r28
     cd0:	df 91       	pop	r29
     cd2:	08 95       	ret

00000cd4 <MDIO_u8SetPinDirection>:

/* Set Pin Direction */
u8 MDIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirec)
{
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	00 d0       	rcall	.+0      	; 0xcda <MDIO_u8SetPinDirection+0x6>
     cda:	00 d0       	rcall	.+0      	; 0xcdc <MDIO_u8SetPinDirection+0x8>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <MDIO_u8SetPinDirection+0xa>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	8a 83       	std	Y+2, r24	; 0x02
     ce4:	6b 83       	std	Y+3, r22	; 0x03
     ce6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorSate = STD_TYPE_OK;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PortId <= MDIO_PORTD && Copy_u8PinDirec <= MDIO_INPUT_PULLED_UP)
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	88 30       	cpi	r24, 0x08	; 8
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <MDIO_u8SetPinDirection+0x20>
     cf2:	91 c1       	rjmp	.+802    	; 0x1016 <MDIO_u8SetPinDirection+0x342>
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	08 f0       	brcs	.+2      	; 0xcfc <MDIO_u8SetPinDirection+0x28>
     cfa:	8d c1       	rjmp	.+794    	; 0x1016 <MDIO_u8SetPinDirection+0x342>
     cfc:	8c 81       	ldd	r24, Y+4	; 0x04
     cfe:	83 30       	cpi	r24, 0x03	; 3
     d00:	08 f0       	brcs	.+2      	; 0xd04 <MDIO_u8SetPinDirection+0x30>
     d02:	89 c1       	rjmp	.+786    	; 0x1016 <MDIO_u8SetPinDirection+0x342>
	{
		/* Select Pin Direction */
		switch (Copy_u8PortId)
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	3e 83       	std	Y+6, r19	; 0x06
     d0c:	2d 83       	std	Y+5, r18	; 0x05
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	91 05       	cpc	r25, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <MDIO_u8SetPinDirection+0x46>
     d18:	71 c0       	rjmp	.+226    	; 0xdfc <MDIO_u8SetPinDirection+0x128>
     d1a:	2d 81       	ldd	r18, Y+5	; 0x05
     d1c:	3e 81       	ldd	r19, Y+6	; 0x06
     d1e:	22 30       	cpi	r18, 0x02	; 2
     d20:	31 05       	cpc	r19, r1
     d22:	2c f4       	brge	.+10     	; 0xd2e <MDIO_u8SetPinDirection+0x5a>
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	9e 81       	ldd	r25, Y+6	; 0x06
     d28:	00 97       	sbiw	r24, 0x00	; 0
     d2a:	71 f0       	breq	.+28     	; 0xd48 <MDIO_u8SetPinDirection+0x74>
     d2c:	75 c1       	rjmp	.+746    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
     d2e:	2d 81       	ldd	r18, Y+5	; 0x05
     d30:	3e 81       	ldd	r19, Y+6	; 0x06
     d32:	22 30       	cpi	r18, 0x02	; 2
     d34:	31 05       	cpc	r19, r1
     d36:	09 f4       	brne	.+2      	; 0xd3a <MDIO_u8SetPinDirection+0x66>
     d38:	bb c0       	rjmp	.+374    	; 0xeb0 <MDIO_u8SetPinDirection+0x1dc>
     d3a:	8d 81       	ldd	r24, Y+5	; 0x05
     d3c:	9e 81       	ldd	r25, Y+6	; 0x06
     d3e:	83 30       	cpi	r24, 0x03	; 3
     d40:	91 05       	cpc	r25, r1
     d42:	09 f4       	brne	.+2      	; 0xd46 <MDIO_u8SetPinDirection+0x72>
     d44:	0f c1       	rjmp	.+542    	; 0xf64 <MDIO_u8SetPinDirection+0x290>
     d46:	68 c1       	rjmp	.+720    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	88 23       	and	r24, r24
     d4c:	a1 f4       	brne	.+40     	; 0xd76 <MDIO_u8SetPinDirection+0xa2>
			{
				/*Set DDRA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     d4e:	aa e3       	ldi	r26, 0x3A	; 58
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ea e3       	ldi	r30, 0x3A	; 58
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	02 2e       	mov	r0, r18
     d66:	02 c0       	rjmp	.+4      	; 0xd6c <MDIO_u8SetPinDirection+0x98>
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	0a 94       	dec	r0
     d6e:	e2 f7       	brpl	.-8      	; 0xd68 <MDIO_u8SetPinDirection+0x94>
     d70:	84 2b       	or	r24, r20
     d72:	8c 93       	st	X, r24
     d74:	51 c1       	rjmp	.+674    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	a9 f4       	brne	.+42     	; 0xda6 <MDIO_u8SetPinDirection+0xd2>
			{
				/*Clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     d7c:	aa e3       	ldi	r26, 0x3A	; 58
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	ea e3       	ldi	r30, 0x3A	; 58
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	48 2f       	mov	r20, r24
     d88:	8b 81       	ldd	r24, Y+3	; 0x03
     d8a:	28 2f       	mov	r18, r24
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	02 2e       	mov	r0, r18
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <MDIO_u8SetPinDirection+0xc6>
     d96:	88 0f       	add	r24, r24
     d98:	99 1f       	adc	r25, r25
     d9a:	0a 94       	dec	r0
     d9c:	e2 f7       	brpl	.-8      	; 0xd96 <MDIO_u8SetPinDirection+0xc2>
     d9e:	80 95       	com	r24
     da0:	84 23       	and	r24, r20
     da2:	8c 93       	st	X, r24
     da4:	39 c1       	rjmp	.+626    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	09 f0       	breq	.+2      	; 0xdae <MDIO_u8SetPinDirection+0xda>
     dac:	35 c1       	rjmp	.+618    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRA Pin in DDRA Reg*/
				CLEAR_BIT(PRIVATE_DDRA_REG, Copy_u8PinId);
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <MDIO_u8SetPinDirection+0xf6>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	2a 95       	dec	r18
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <MDIO_u8SetPinDirection+0xf2>
     dce:	80 95       	com	r24
     dd0:	84 23       	and	r24, r20
     dd2:	8c 93       	st	X, r24
				/*Set PORTA Pin in DDRA Reg*/
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
     dd4:	ab e3       	ldi	r26, 0x3B	; 59
     dd6:	b0 e0       	ldi	r27, 0x00	; 0
     dd8:	eb e3       	ldi	r30, 0x3B	; 59
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	48 2f       	mov	r20, r24
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 2e       	mov	r0, r18
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <MDIO_u8SetPinDirection+0x11e>
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	0a 94       	dec	r0
     df4:	e2 f7       	brpl	.-8      	; 0xdee <MDIO_u8SetPinDirection+0x11a>
     df6:	84 2b       	or	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	0e c1       	rjmp	.+540    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	88 23       	and	r24, r24
     e00:	a1 f4       	brne	.+40     	; 0xe2a <MDIO_u8SetPinDirection+0x156>
			{
				/*Set DDRB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     e02:	a7 e3       	ldi	r26, 0x37	; 55
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e7 e3       	ldi	r30, 0x37	; 55
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <MDIO_u8SetPinDirection+0x14c>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <MDIO_u8SetPinDirection+0x148>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	f7 c0       	rjmp	.+494    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	a9 f4       	brne	.+42     	; 0xe5a <MDIO_u8SetPinDirection+0x186>
			{
				/*Clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     e30:	a7 e3       	ldi	r26, 0x37	; 55
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e3       	ldi	r30, 0x37	; 55
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	48 2f       	mov	r20, r24
     e3c:	8b 81       	ldd	r24, Y+3	; 0x03
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	02 2e       	mov	r0, r18
     e48:	02 c0       	rjmp	.+4      	; 0xe4e <MDIO_u8SetPinDirection+0x17a>
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	0a 94       	dec	r0
     e50:	e2 f7       	brpl	.-8      	; 0xe4a <MDIO_u8SetPinDirection+0x176>
     e52:	80 95       	com	r24
     e54:	84 23       	and	r24, r20
     e56:	8c 93       	st	X, r24
     e58:	df c0       	rjmp	.+446    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	82 30       	cpi	r24, 0x02	; 2
     e5e:	09 f0       	breq	.+2      	; 0xe62 <MDIO_u8SetPinDirection+0x18e>
     e60:	db c0       	rjmp	.+438    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRB Pin in DDRB Reg*/
				CLEAR_BIT(PRIVATE_DDRB_REG, Copy_u8PinId);
     e62:	a7 e3       	ldi	r26, 0x37	; 55
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e7 e3       	ldi	r30, 0x37	; 55
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <MDIO_u8SetPinDirection+0x1aa>
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	2a 95       	dec	r18
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <MDIO_u8SetPinDirection+0x1a6>
     e82:	80 95       	com	r24
     e84:	84 23       	and	r24, r20
     e86:	8c 93       	st	X, r24
				/*Set PORTB Pin in DDRB Reg*/
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
     e88:	a8 e3       	ldi	r26, 0x38	; 56
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e8 e3       	ldi	r30, 0x38	; 56
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	80 81       	ld	r24, Z
     e92:	48 2f       	mov	r20, r24
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <MDIO_u8SetPinDirection+0x1d2>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <MDIO_u8SetPinDirection+0x1ce>
     eaa:	84 2b       	or	r24, r20
     eac:	8c 93       	st	X, r24
     eae:	b4 c0       	rjmp	.+360    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     eb0:	8c 81       	ldd	r24, Y+4	; 0x04
     eb2:	88 23       	and	r24, r24
     eb4:	a1 f4       	brne	.+40     	; 0xede <MDIO_u8SetPinDirection+0x20a>
			{
				/*Set DDRC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <MDIO_u8SetPinDirection+0x200>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <MDIO_u8SetPinDirection+0x1fc>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	9d c0       	rjmp	.+314    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	81 30       	cpi	r24, 0x01	; 1
     ee2:	a9 f4       	brne	.+42     	; 0xf0e <MDIO_u8SetPinDirection+0x23a>
			{
				/*Clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
     ee4:	a4 e3       	ldi	r26, 0x34	; 52
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e4 e3       	ldi	r30, 0x34	; 52
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	48 2f       	mov	r20, r24
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <MDIO_u8SetPinDirection+0x22e>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <MDIO_u8SetPinDirection+0x22a>
     f06:	80 95       	com	r24
     f08:	84 23       	and	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	85 c0       	rjmp	.+266    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	09 f0       	breq	.+2      	; 0xf16 <MDIO_u8SetPinDirection+0x242>
     f14:	81 c0       	rjmp	.+258    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRC Pin in DDRC Reg*/
				CLEAR_BIT(PRIVATE_DDRC_REG, Copy_u8PinId);
     f16:	a4 e3       	ldi	r26, 0x34	; 52
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e4 e3       	ldi	r30, 0x34	; 52
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <MDIO_u8SetPinDirection+0x25e>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	2a 95       	dec	r18
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <MDIO_u8SetPinDirection+0x25a>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
				/*Set PORTC Pin in DDRC Reg*/
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
     f3c:	a5 e3       	ldi	r26, 0x35	; 53
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	e5 e3       	ldi	r30, 0x35	; 53
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <MDIO_u8SetPinDirection+0x286>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <MDIO_u8SetPinDirection+0x282>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	5a c0       	rjmp	.+180    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDirec == MDIO_OUTPUT)
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	88 23       	and	r24, r24
     f68:	a1 f4       	brne	.+40     	; 0xf92 <MDIO_u8SetPinDirection+0x2be>
			{
				/*Set DDRD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
     f6a:	a1 e3       	ldi	r26, 0x31	; 49
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	e1 e3       	ldi	r30, 0x31	; 49
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <MDIO_u8SetPinDirection+0x2b4>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <MDIO_u8SetPinDirection+0x2b0>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	43 c0       	rjmp	.+134    	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_FLOATING)
     f92:	8c 81       	ldd	r24, Y+4	; 0x04
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	a9 f4       	brne	.+42     	; 0xfc2 <MDIO_u8SetPinDirection+0x2ee>
			{
				/*Clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
     f98:	a1 e3       	ldi	r26, 0x31	; 49
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e1 e3       	ldi	r30, 0x31	; 49
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <MDIO_u8SetPinDirection+0x2e2>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <MDIO_u8SetPinDirection+0x2de>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	2b c0       	rjmp	.+86     	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			}
			else if (Copy_u8PinDirec == MDIO_INPUT_PULLED_UP)
     fc2:	8c 81       	ldd	r24, Y+4	; 0x04
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	41 f5       	brne	.+80     	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			{
				/*clear DDRD Pin in DDRD Reg*/
				CLEAR_BIT(PRIVATE_DDRD_REG, Copy_u8PinId);
     fc8:	a1 e3       	ldi	r26, 0x31	; 49
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e3       	ldi	r30, 0x31	; 49
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <MDIO_u8SetPinDirection+0x310>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	2a 95       	dec	r18
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <MDIO_u8SetPinDirection+0x30c>
     fe8:	80 95       	com	r24
     fea:	84 23       	and	r24, r20
     fec:	8c 93       	st	X, r24
				/*Set PORTD Pin in DDRD Reg*/
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
     fee:	a2 e3       	ldi	r26, 0x32	; 50
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <MDIO_u8SetPinDirection+0x338>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <MDIO_u8SetPinDirection+0x334>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <MDIO_u8SetPinDirection+0x344>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    1018:	89 81       	ldd	r24, Y+1	; 0x01
}
    101a:	26 96       	adiw	r28, 0x06	; 6
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	08 95       	ret

0000102c <MDIO_u8SetPortDirection>:

/* Set Port Direction */
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirec)
{
    102c:	df 93       	push	r29
    102e:	cf 93       	push	r28
    1030:	00 d0       	rcall	.+0      	; 0x1032 <MDIO_u8SetPortDirection+0x6>
    1032:	00 d0       	rcall	.+0      	; 0x1034 <MDIO_u8SetPortDirection+0x8>
    1034:	0f 92       	push	r0
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	8a 83       	std	Y+2, r24	; 0x02
    103c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorSate = STD_TYPE_OK;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= MDIO_PORTD) && (Copy_u8PortDirec <= MDIO_INPUT_PULLED_UP))
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	08 f0       	brcs	.+2      	; 0x104a <MDIO_u8SetPortDirection+0x1e>
    1048:	90 c0       	rjmp	.+288    	; 0x116a <MDIO_u8SetPortDirection+0x13e>
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	83 30       	cpi	r24, 0x03	; 3
    104e:	08 f0       	brcs	.+2      	; 0x1052 <MDIO_u8SetPortDirection+0x26>
    1050:	8c c0       	rjmp	.+280    	; 0x116a <MDIO_u8SetPortDirection+0x13e>
	{
		switch (Copy_u8PortId)
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3d 83       	std	Y+5, r19	; 0x05
    105a:	2c 83       	std	Y+4, r18	; 0x04
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	89 f1       	breq	.+98     	; 0x10c8 <MDIO_u8SetPortDirection+0x9c>
    1066:	2c 81       	ldd	r18, Y+4	; 0x04
    1068:	3d 81       	ldd	r19, Y+5	; 0x05
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <MDIO_u8SetPortDirection+0x4e>
    1070:	8c 81       	ldd	r24, Y+4	; 0x04
    1072:	9d 81       	ldd	r25, Y+5	; 0x05
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	69 f0       	breq	.+26     	; 0x1092 <MDIO_u8SetPortDirection+0x66>
    1078:	76 c0       	rjmp	.+236    	; 0x1166 <MDIO_u8SetPortDirection+0x13a>
    107a:	2c 81       	ldd	r18, Y+4	; 0x04
    107c:	3d 81       	ldd	r19, Y+5	; 0x05
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	e9 f1       	breq	.+122    	; 0x10fe <MDIO_u8SetPortDirection+0xd2>
    1084:	8c 81       	ldd	r24, Y+4	; 0x04
    1086:	9d 81       	ldd	r25, Y+5	; 0x05
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <MDIO_u8SetPortDirection+0x64>
    108e:	51 c0       	rjmp	.+162    	; 0x1132 <MDIO_u8SetPortDirection+0x106>
    1090:	6a c0       	rjmp	.+212    	; 0x1166 <MDIO_u8SetPortDirection+0x13a>
		{
		case MDIO_PORTA:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	88 23       	and	r24, r24
    1096:	29 f4       	brne	.+10     	; 0x10a2 <MDIO_u8SetPortDirection+0x76>
			{
				/* Set all Port A pins as Output */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_OUTPUT;
    1098:	ea e3       	ldi	r30, 0x3A	; 58
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	80 83       	st	Z, r24
    10a0:	65 c0       	rjmp	.+202    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	81 30       	cpi	r24, 0x01	; 1
    10a6:	21 f4       	brne	.+8      	; 0x10b0 <MDIO_u8SetPortDirection+0x84>
			{
				/* Set all Port A pins as Input (Floating) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    10a8:	ea e3       	ldi	r30, 0x3A	; 58
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
    10ae:	5e c0       	rjmp	.+188    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <MDIO_u8SetPortDirection+0x8c>
    10b6:	5a c0       	rjmp	.+180    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port A pins as Input (Pulled-Up) */
				PRIVATE_DDRA_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    10b8:	ea e3       	ldi	r30, 0x3A	; 58
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port A pins */
				PRIVATE_PORTA_REG = PRIVATE_ALL_PORT_OUTPUT;
    10be:	eb e3       	ldi	r30, 0x3B	; 59
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	80 83       	st	Z, r24
    10c6:	52 c0       	rjmp	.+164    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	88 23       	and	r24, r24
    10cc:	29 f4       	brne	.+10     	; 0x10d8 <MDIO_u8SetPortDirection+0xac>
			{
				/* Set all Port B pins as Output */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_OUTPUT;
    10ce:	e7 e3       	ldi	r30, 0x37	; 55
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	80 83       	st	Z, r24
    10d6:	4a c0       	rjmp	.+148    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <MDIO_u8SetPortDirection+0xba>
			{
				/* Set all Port B pins as Input (Floating) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    10de:	e7 e3       	ldi	r30, 0x37	; 55
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	10 82       	st	Z, r1
    10e4:	43 c0       	rjmp	.+134    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	82 30       	cpi	r24, 0x02	; 2
    10ea:	09 f0       	breq	.+2      	; 0x10ee <MDIO_u8SetPortDirection+0xc2>
    10ec:	3f c0       	rjmp	.+126    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port B pins as Input (Pulled-Up) */
				PRIVATE_DDRB_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    10ee:	e7 e3       	ldi	r30, 0x37	; 55
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port B pins */
				PRIVATE_PORTB_REG = PRIVATE_ALL_PORT_OUTPUT;
    10f4:	e8 e3       	ldi	r30, 0x38	; 56
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	80 83       	st	Z, r24
    10fc:	37 c0       	rjmp	.+110    	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	88 23       	and	r24, r24
    1102:	29 f4       	brne	.+10     	; 0x110e <MDIO_u8SetPortDirection+0xe2>
			{
				/* Set all Port C pins as Output */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1104:	e4 e3       	ldi	r30, 0x34	; 52
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	80 83       	st	Z, r24
    110c:	2f c0       	rjmp	.+94     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	81 30       	cpi	r24, 0x01	; 1
    1112:	21 f4       	brne	.+8      	; 0x111c <MDIO_u8SetPortDirection+0xf0>
			{
				/* Set all Port C pins as Input (Floating) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1114:	e4 e3       	ldi	r30, 0x34	; 52
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	10 82       	st	Z, r1
    111a:	28 c0       	rjmp	.+80     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	29 f5       	brne	.+74     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port C pins as Input (Pulled-Up) */
				PRIVATE_DDRC_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1122:	e4 e3       	ldi	r30, 0x34	; 52
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port C pins */
				PRIVATE_PORTC_REG = PRIVATE_ALL_PORT_OUTPUT;
    1128:	e5 e3       	ldi	r30, 0x35	; 53
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	80 83       	st	Z, r24
    1130:	1d c0       	rjmp	.+58     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PortDirec == MDIO_OUTPUT)
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	88 23       	and	r24, r24
    1136:	29 f4       	brne	.+10     	; 0x1142 <MDIO_u8SetPortDirection+0x116>
			{
				/* Set all Port D pins as Output */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_OUTPUT;
    1138:	e1 e3       	ldi	r30, 0x31	; 49
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	80 83       	st	Z, r24
    1140:	15 c0       	rjmp	.+42     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_FLOATING)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	21 f4       	brne	.+8      	; 0x1150 <MDIO_u8SetPortDirection+0x124>
			{
				/* Set all Port D pins as Input (Floating) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_FLOATING;
    1148:	e1 e3       	ldi	r30, 0x31	; 49
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	10 82       	st	Z, r1
    114e:	0e c0       	rjmp	.+28     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			else if (Copy_u8PortDirec == MDIO_INPUT_PULLED_UP)
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	59 f4       	brne	.+22     	; 0x116c <MDIO_u8SetPortDirection+0x140>
			{
				/* Set all Port D pins as Input (Pulled-Up) */
				PRIVATE_DDRD_REG = PRIVATE_ALL_PORT_INPUT_PULLED_UP;
    1156:	e1 e3       	ldi	r30, 0x31	; 49
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	10 82       	st	Z, r1
				/* Enable Pull-Up on all Port D pins */
				PRIVATE_PORTD_REG = PRIVATE_ALL_PORT_OUTPUT;
    115c:	e2 e3       	ldi	r30, 0x32	; 50
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	80 83       	st	Z, r24
    1164:	03 c0       	rjmp	.+6      	; 0x116c <MDIO_u8SetPortDirection+0x140>
			}
			break;
		default:
			Local_u8ErrorSate = STD_TYPE_NOK;
    1166:	19 82       	std	Y+1, r1	; 0x01
    1168:	01 c0       	rjmp	.+2      	; 0x116c <MDIO_u8SetPortDirection+0x140>
			break;
		}
	}
	else
	{
		Local_u8ErrorSate = STD_TYPE_NOK;
    116a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorSate;
    116c:	89 81       	ldd	r24, Y+1	; 0x01
}
    116e:	0f 90       	pop	r0
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <MDIO_u8SetPinValue>:
/* Set Pin Value */
u8 MDIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <MDIO_u8SetPinValue+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <MDIO_u8SetPinValue+0x8>
    1186:	00 d0       	rcall	.+0      	; 0x1188 <MDIO_u8SetPinValue+0xa>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
    118e:	6b 83       	std	Y+3, r22	; 0x03
    1190:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_u8PinValue <= MDIO_HIGH)
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	84 30       	cpi	r24, 0x04	; 4
    119a:	08 f0       	brcs	.+2      	; 0x119e <MDIO_u8SetPinValue+0x20>
    119c:	eb c0       	rjmp	.+470    	; 0x1374 <MDIO_u8SetPinValue+0x1f6>
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	88 30       	cpi	r24, 0x08	; 8
    11a2:	08 f0       	brcs	.+2      	; 0x11a6 <MDIO_u8SetPinValue+0x28>
    11a4:	e7 c0       	rjmp	.+462    	; 0x1374 <MDIO_u8SetPinValue+0x1f6>
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	82 30       	cpi	r24, 0x02	; 2
    11aa:	08 f0       	brcs	.+2      	; 0x11ae <MDIO_u8SetPinValue+0x30>
    11ac:	e3 c0       	rjmp	.+454    	; 0x1374 <MDIO_u8SetPinValue+0x1f6>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	3e 83       	std	Y+6, r19	; 0x06
    11b6:	2d 83       	std	Y+5, r18	; 0x05
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	81 30       	cpi	r24, 0x01	; 1
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <MDIO_u8SetPinValue+0x46>
    11c2:	47 c0       	rjmp	.+142    	; 0x1252 <MDIO_u8SetPinValue+0xd4>
    11c4:	2d 81       	ldd	r18, Y+5	; 0x05
    11c6:	3e 81       	ldd	r19, Y+6	; 0x06
    11c8:	22 30       	cpi	r18, 0x02	; 2
    11ca:	31 05       	cpc	r19, r1
    11cc:	2c f4       	brge	.+10     	; 0x11d8 <MDIO_u8SetPinValue+0x5a>
    11ce:	8d 81       	ldd	r24, Y+5	; 0x05
    11d0:	9e 81       	ldd	r25, Y+6	; 0x06
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <MDIO_u8SetPinValue+0x74>
    11d6:	cc c0       	rjmp	.+408    	; 0x1370 <MDIO_u8SetPinValue+0x1f2>
    11d8:	2d 81       	ldd	r18, Y+5	; 0x05
    11da:	3e 81       	ldd	r19, Y+6	; 0x06
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <MDIO_u8SetPinValue+0x66>
    11e2:	67 c0       	rjmp	.+206    	; 0x12b2 <MDIO_u8SetPinValue+0x134>
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <MDIO_u8SetPinValue+0x72>
    11ee:	91 c0       	rjmp	.+290    	; 0x1312 <MDIO_u8SetPinValue+0x194>
    11f0:	bf c0       	rjmp	.+382    	; 0x1370 <MDIO_u8SetPinValue+0x1f2>
		{
		case MDIO_PORTA:
			if (Copy_u8PinValue == MDIO_HIGH)
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	a1 f4       	brne	.+40     	; 0x1220 <MDIO_u8SetPinValue+0xa2>
			{
				/* Set PORTA Pin in PORTA Reg */
				SET_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    11f8:	ab e3       	ldi	r26, 0x3B	; 59
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	eb e3       	ldi	r30, 0x3B	; 59
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <MDIO_u8SetPinValue+0x98>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <MDIO_u8SetPinValue+0x94>
    121a:	84 2b       	or	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	ab c0       	rjmp	.+342    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	88 23       	and	r24, r24
    1224:	09 f0       	breq	.+2      	; 0x1228 <MDIO_u8SetPinValue+0xaa>
    1226:	a7 c0       	rjmp	.+334    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTA Pin in PORTA Reg */
				CLEAR_BIT(PRIVATE_PORTA_REG, Copy_u8PinId);
    1228:	ab e3       	ldi	r26, 0x3B	; 59
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	eb e3       	ldi	r30, 0x3B	; 59
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	48 2f       	mov	r20, r24
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 2e       	mov	r0, r18
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <MDIO_u8SetPinValue+0xc8>
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	0a 94       	dec	r0
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <MDIO_u8SetPinValue+0xc4>
    124a:	80 95       	com	r24
    124c:	84 23       	and	r24, r20
    124e:	8c 93       	st	X, r24
    1250:	92 c0       	rjmp	.+292    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinValue == MDIO_HIGH)
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	a1 f4       	brne	.+40     	; 0x1280 <MDIO_u8SetPinValue+0x102>
			{
				/* Set PORTB Pin in PORTB Reg */
				SET_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    1258:	a8 e3       	ldi	r26, 0x38	; 56
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e8 e3       	ldi	r30, 0x38	; 56
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <MDIO_u8SetPinValue+0xf8>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <MDIO_u8SetPinValue+0xf4>
    127a:	84 2b       	or	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	7b c0       	rjmp	.+246    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	88 23       	and	r24, r24
    1284:	09 f0       	breq	.+2      	; 0x1288 <MDIO_u8SetPinValue+0x10a>
    1286:	77 c0       	rjmp	.+238    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTB Pin in PORTB Reg */
				CLEAR_BIT(PRIVATE_PORTB_REG, Copy_u8PinId);
    1288:	a8 e3       	ldi	r26, 0x38	; 56
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <MDIO_u8SetPinValue+0x128>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <MDIO_u8SetPinValue+0x124>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	62 c0       	rjmp	.+196    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinValue == MDIO_HIGH)
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	a1 f4       	brne	.+40     	; 0x12e0 <MDIO_u8SetPinValue+0x162>
			{
				/* Set PORTC Pin in PORTC Reg */
				SET_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    12b8:	a5 e3       	ldi	r26, 0x35	; 53
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e5 e3       	ldi	r30, 0x35	; 53
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <MDIO_u8SetPinValue+0x158>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <MDIO_u8SetPinValue+0x154>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
    12de:	4b c0       	rjmp	.+150    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	88 23       	and	r24, r24
    12e4:	09 f0       	breq	.+2      	; 0x12e8 <MDIO_u8SetPinValue+0x16a>
    12e6:	47 c0       	rjmp	.+142    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTC Pin in PORTC Reg */
				CLEAR_BIT(PRIVATE_PORTC_REG, Copy_u8PinId);
    12e8:	a5 e3       	ldi	r26, 0x35	; 53
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e5 e3       	ldi	r30, 0x35	; 53
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <MDIO_u8SetPinValue+0x188>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <MDIO_u8SetPinValue+0x184>
    130a:	80 95       	com	r24
    130c:	84 23       	and	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	32 c0       	rjmp	.+100    	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinValue == MDIO_HIGH)
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	a1 f4       	brne	.+40     	; 0x1340 <MDIO_u8SetPinValue+0x1c2>
			{
				/* Set PORTD Pin in PORTD Reg */
				SET_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    1318:	a2 e3       	ldi	r26, 0x32	; 50
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e2 e3       	ldi	r30, 0x32	; 50
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <MDIO_u8SetPinValue+0x1b8>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <MDIO_u8SetPinValue+0x1b4>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	1b c0       	rjmp	.+54     	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			else if (Copy_u8PinValue == MDIO_LOW)
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	88 23       	and	r24, r24
    1344:	c1 f4       	brne	.+48     	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			{
				/* Clear PORTD Pin in PORTD Reg */
				CLEAR_BIT(PRIVATE_PORTD_REG, Copy_u8PinId);
    1346:	a2 e3       	ldi	r26, 0x32	; 50
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	e2 e3       	ldi	r30, 0x32	; 50
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <MDIO_u8SetPinValue+0x1e6>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <MDIO_u8SetPinValue+0x1e2>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <MDIO_u8SetPinValue+0x1f8>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    1374:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
}
    1378:	26 96       	adiw	r28, 0x06	; 6
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <MDIO_u8SetPortValue>:

/* Set Port Value */
u8 MDIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	00 d0       	rcall	.+0      	; 0x1390 <MDIO_u8SetPortValue+0x6>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <MDIO_u8SetPortValue+0x8>
    1392:	0f 92       	push	r0
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortId <= MDIO_PORTD)
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	98 f5       	brcc	.+102    	; 0x140c <MDIO_u8SetPortValue+0x82>
	{
		switch (Copy_u8PortId)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	3d 83       	std	Y+5, r19	; 0x05
    13ae:	2c 83       	std	Y+4, r18	; 0x04
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	91 05       	cpc	r25, r1
    13b8:	d1 f0       	breq	.+52     	; 0x13ee <MDIO_u8SetPortValue+0x64>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	2c f4       	brge	.+10     	; 0x13ce <MDIO_u8SetPortValue+0x44>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	61 f0       	breq	.+24     	; 0x13e4 <MDIO_u8SetPortValue+0x5a>
    13cc:	20 c0       	rjmp	.+64     	; 0x140e <MDIO_u8SetPortValue+0x84>
    13ce:	2c 81       	ldd	r18, Y+4	; 0x04
    13d0:	3d 81       	ldd	r19, Y+5	; 0x05
    13d2:	22 30       	cpi	r18, 0x02	; 2
    13d4:	31 05       	cpc	r19, r1
    13d6:	81 f0       	breq	.+32     	; 0x13f8 <MDIO_u8SetPortValue+0x6e>
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	9d 81       	ldd	r25, Y+5	; 0x05
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <MDIO_u8SetPortValue+0x78>
    13e2:	15 c0       	rjmp	.+42     	; 0x140e <MDIO_u8SetPortValue+0x84>
		{
		case MDIO_PORTA: PRIVATE_PORTA_REG = Copy_u8PortValue; break;
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	80 83       	st	Z, r24
    13ec:	10 c0       	rjmp	.+32     	; 0x140e <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTB: PRIVATE_PORTB_REG = Copy_u8PortValue; break;
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	80 83       	st	Z, r24
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTC: PRIVATE_PORTC_REG = Copy_u8PortValue; break;
    13f8:	e5 e3       	ldi	r30, 0x35	; 53
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	80 83       	st	Z, r24
    1400:	06 c0       	rjmp	.+12     	; 0x140e <MDIO_u8SetPortValue+0x84>
		case MDIO_PORTD: PRIVATE_PORTD_REG = Copy_u8PortValue; break;
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	80 83       	st	Z, r24
    140a:	01 c0       	rjmp	.+2      	; 0x140e <MDIO_u8SetPortValue+0x84>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK;
    140c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <MDIO_u8GetPinValue>:

/* Get Pin Value */
u8 MDIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	27 97       	sbiw	r28, 0x07	; 7
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	8a 83       	std	Y+2, r24	; 0x02
    1436:	6b 83       	std	Y+3, r22	; 0x03
    1438:	5d 83       	std	Y+5, r21	; 0x05
    143a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPE_OK; // Initialize error state to OK
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01

	// Check if the port ID, pin ID are within valid ranges and pointer is not NULL
	if (Copy_u8PortId <= MDIO_PORTD && Copy_u8PinId <= MDIO_PIN_7 && Copy_pu8ReturnedPinValue != STD_TYPE_POINTER_NULL)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	84 30       	cpi	r24, 0x04	; 4
    1444:	08 f0       	brcs	.+2      	; 0x1448 <MDIO_u8GetPinValue+0x28>
    1446:	7c c0       	rjmp	.+248    	; 0x1540 <MDIO_u8GetPinValue+0x120>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	08 f0       	brcs	.+2      	; 0x1450 <MDIO_u8GetPinValue+0x30>
    144e:	78 c0       	rjmp	.+240    	; 0x1540 <MDIO_u8GetPinValue+0x120>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	09 f4       	brne	.+2      	; 0x145a <MDIO_u8GetPinValue+0x3a>
    1458:	73 c0       	rjmp	.+230    	; 0x1540 <MDIO_u8GetPinValue+0x120>
	{
		// Retrieve the value from the correct port
		switch (Copy_u8PortId)
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3f 83       	std	Y+7, r19	; 0x07
    1462:	2e 83       	std	Y+6, r18	; 0x06
    1464:	4e 81       	ldd	r20, Y+6	; 0x06
    1466:	5f 81       	ldd	r21, Y+7	; 0x07
    1468:	41 30       	cpi	r20, 0x01	; 1
    146a:	51 05       	cpc	r21, r1
    146c:	59 f1       	breq	.+86     	; 0x14c4 <MDIO_u8GetPinValue+0xa4>
    146e:	8e 81       	ldd	r24, Y+6	; 0x06
    1470:	9f 81       	ldd	r25, Y+7	; 0x07
    1472:	82 30       	cpi	r24, 0x02	; 2
    1474:	91 05       	cpc	r25, r1
    1476:	34 f4       	brge	.+12     	; 0x1484 <MDIO_u8GetPinValue+0x64>
    1478:	2e 81       	ldd	r18, Y+6	; 0x06
    147a:	3f 81       	ldd	r19, Y+7	; 0x07
    147c:	21 15       	cp	r18, r1
    147e:	31 05       	cpc	r19, r1
    1480:	69 f0       	breq	.+26     	; 0x149c <MDIO_u8GetPinValue+0x7c>
    1482:	5c c0       	rjmp	.+184    	; 0x153c <MDIO_u8GetPinValue+0x11c>
    1484:	4e 81       	ldd	r20, Y+6	; 0x06
    1486:	5f 81       	ldd	r21, Y+7	; 0x07
    1488:	42 30       	cpi	r20, 0x02	; 2
    148a:	51 05       	cpc	r21, r1
    148c:	79 f1       	breq	.+94     	; 0x14ec <MDIO_u8GetPinValue+0xcc>
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	9f 81       	ldd	r25, Y+7	; 0x07
    1492:	83 30       	cpi	r24, 0x03	; 3
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <MDIO_u8GetPinValue+0x7a>
    1498:	3d c0       	rjmp	.+122    	; 0x1514 <MDIO_u8GetPinValue+0xf4>
    149a:	50 c0       	rjmp	.+160    	; 0x153c <MDIO_u8GetPinValue+0x11c>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINA_REG, Copy_u8PinId); // Get specific pin value from PORTA
    149c:	e9 e3       	ldi	r30, 0x39	; 57
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <MDIO_u8GetPinValue+0x94>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <MDIO_u8GetPinValue+0x90>
    14b8:	ca 01       	movw	r24, r20
    14ba:	81 70       	andi	r24, 0x01	; 1
    14bc:	ec 81       	ldd	r30, Y+4	; 0x04
    14be:	fd 81       	ldd	r31, Y+5	; 0x05
    14c0:	80 83       	st	Z, r24
    14c2:	3f c0       	rjmp	.+126    	; 0x1542 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINB_REG, Copy_u8PinId); // Get specific pin value from PORTB
    14c4:	e6 e3       	ldi	r30, 0x36	; 54
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <MDIO_u8GetPinValue+0xbc>
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <MDIO_u8GetPinValue+0xb8>
    14e0:	ca 01       	movw	r24, r20
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	ec 81       	ldd	r30, Y+4	; 0x04
    14e6:	fd 81       	ldd	r31, Y+5	; 0x05
    14e8:	80 83       	st	Z, r24
    14ea:	2b c0       	rjmp	.+86     	; 0x1542 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PINC_REG, Copy_u8PinId); // Get specific pin value from PORTC
    14ec:	e3 e3       	ldi	r30, 0x33	; 51
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <MDIO_u8GetPinValue+0xe4>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <MDIO_u8GetPinValue+0xe0>
    1508:	ca 01       	movw	r24, r20
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	ec 81       	ldd	r30, Y+4	; 0x04
    150e:	fd 81       	ldd	r31, Y+5	; 0x05
    1510:	80 83       	st	Z, r24
    1512:	17 c0       	rjmp	.+46     	; 0x1542 <MDIO_u8GetPinValue+0x122>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPinValue = GET_BIT(PRIVATE_PIND_REG, Copy_u8PinId); // Get specific pin value from PORTD
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <MDIO_u8GetPinValue+0x10c>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <MDIO_u8GetPinValue+0x108>
    1530:	ca 01       	movw	r24, r20
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	ec 81       	ldd	r30, Y+4	; 0x04
    1536:	fd 81       	ldd	r31, Y+5	; 0x05
    1538:	80 83       	st	Z, r24
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <MDIO_u8GetPinValue+0x122>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if port ID is invalid
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <MDIO_u8GetPinValue+0x122>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPE_NOK; // Set error state to NOK if input parameters are invalid
    1540:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState; // Return the error state
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	27 96       	adiw	r28, 0x07	; 7
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <MDIO_u8GetPortValue>:

/* Get Port Value */
u8 MDIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <MDIO_u8GetPortValue+0x6>
    155c:	00 d0       	rcall	.+0      	; 0x155e <MDIO_u8GetPortValue+0x8>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <MDIO_u8GetPortValue+0xa>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	8a 83       	std	Y+2, r24	; 0x02
    1566:	7c 83       	std	Y+4, r23	; 0x04
    1568:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK; // Corrected spelling from ErrorSate to ErrorState
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= MDIO_PORTD && Copy_pu8ReturnedPortValue != STD_TYPE_POINTER_NULL)
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	08 f0       	brcs	.+2      	; 0x1576 <MDIO_u8GetPortValue+0x20>
    1574:	40 c0       	rjmp	.+128    	; 0x15f6 <MDIO_u8GetPortValue+0xa0>
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	00 97       	sbiw	r24, 0x00	; 0
    157c:	e1 f1       	breq	.+120    	; 0x15f6 <MDIO_u8GetPortValue+0xa0>
	{
		/* Set Pin Value */
		switch (Copy_u8PortId)
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	3e 83       	std	Y+6, r19	; 0x06
    1586:	2d 83       	std	Y+5, r18	; 0x05
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	81 30       	cpi	r24, 0x01	; 1
    158e:	91 05       	cpc	r25, r1
    1590:	e1 f0       	breq	.+56     	; 0x15ca <MDIO_u8GetPortValue+0x74>
    1592:	2d 81       	ldd	r18, Y+5	; 0x05
    1594:	3e 81       	ldd	r19, Y+6	; 0x06
    1596:	22 30       	cpi	r18, 0x02	; 2
    1598:	31 05       	cpc	r19, r1
    159a:	2c f4       	brge	.+10     	; 0x15a6 <MDIO_u8GetPortValue+0x50>
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	00 97       	sbiw	r24, 0x00	; 0
    15a2:	61 f0       	breq	.+24     	; 0x15bc <MDIO_u8GetPortValue+0x66>
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <MDIO_u8GetPortValue+0x9e>
    15a6:	2d 81       	ldd	r18, Y+5	; 0x05
    15a8:	3e 81       	ldd	r19, Y+6	; 0x06
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	a1 f0       	breq	.+40     	; 0x15d8 <MDIO_u8GetPortValue+0x82>
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	91 05       	cpc	r25, r1
    15b8:	b1 f0       	breq	.+44     	; 0x15e6 <MDIO_u8GetPortValue+0x90>
    15ba:	1c c0       	rjmp	.+56     	; 0x15f4 <MDIO_u8GetPortValue+0x9e>
		{
		case MDIO_PORTA:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINA_REG;
    15bc:	e9 e3       	ldi	r30, 0x39	; 57
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	eb 81       	ldd	r30, Y+3	; 0x03
    15c4:	fc 81       	ldd	r31, Y+4	; 0x04
    15c6:	80 83       	st	Z, r24
    15c8:	16 c0       	rjmp	.+44     	; 0x15f6 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTB:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINB_REG;
    15ca:	e6 e3       	ldi	r30, 0x36	; 54
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	eb 81       	ldd	r30, Y+3	; 0x03
    15d2:	fc 81       	ldd	r31, Y+4	; 0x04
    15d4:	80 83       	st	Z, r24
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTC:
			*Copy_pu8ReturnedPortValue = PRIVATE_PINC_REG;
    15d8:	e3 e3       	ldi	r30, 0x33	; 51
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	eb 81       	ldd	r30, Y+3	; 0x03
    15e0:	fc 81       	ldd	r31, Y+4	; 0x04
    15e2:	80 83       	st	Z, r24
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <MDIO_u8GetPortValue+0xa0>
			break;
		case MDIO_PORTD:
			*Copy_pu8ReturnedPortValue = PRIVATE_PIND_REG;
    15e6:	e0 e3       	ldi	r30, 0x30	; 48
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	eb 81       	ldd	r30, Y+3	; 0x03
    15ee:	fc 81       	ldd	r31, Y+4	; 0x04
    15f0:	80 83       	st	Z, r24
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <MDIO_u8GetPortValue+0xa0>
			break;
		default:
			Local_u8ErrorState = STD_TYPE_NOK;
    15f4:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
	}
	return Local_u8ErrorState;
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f8:	26 96       	adiw	r28, 0x06	; 6
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	f8 94       	cli
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	08 95       	ret

0000160a <HLCD_VoidLcdIint>:
#include "HLCD_config.h"
#include "HLCD_interface.h"


void HLCD_VoidLcdIint(void)
{
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	cc 54       	subi	r28, 0x4C	; 76
    1618:	d0 40       	sbci	r29, 0x00	; 0
    161a:	0f b6       	in	r0, 0x3f	; 63
    161c:	f8 94       	cli
    161e:	de bf       	out	0x3e, r29	; 62
    1620:	0f be       	out	0x3f, r0	; 63
    1622:	cd bf       	out	0x3d, r28	; 61
    1624:	fe 01       	movw	r30, r28
    1626:	e7 5b       	subi	r30, 0xB7	; 183
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	a8 ef       	ldi	r26, 0xF8	; 248
    1630:	b1 e4       	ldi	r27, 0x41	; 65
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163a:	8e 01       	movw	r16, r28
    163c:	0b 5b       	subi	r16, 0xBB	; 187
    163e:	1f 4f       	sbci	r17, 0xFF	; 255
    1640:	fe 01       	movw	r30, r28
    1642:	e7 5b       	subi	r30, 0xB7	; 183
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	60 81       	ld	r22, Z
    1648:	71 81       	ldd	r23, Z+1	; 0x01
    164a:	82 81       	ldd	r24, Z+2	; 0x02
    164c:	93 81       	ldd	r25, Z+3	; 0x03
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a ef       	ldi	r20, 0xFA	; 250
    1654:	54 e4       	ldi	r21, 0x44	; 68
    1656:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	a2 83       	std	Z+2, r26	; 0x02
    1666:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1668:	fe 01       	movw	r30, r28
    166a:	eb 5b       	subi	r30, 0xBB	; 187
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	44 f4       	brge	.+16     	; 0x1696 <HLCD_VoidLcdIint+0x8c>
		__ticks = 1;
    1686:	fe 01       	movw	r30, r28
    1688:	ed 5b       	subi	r30, 0xBD	; 189
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	64 c0       	rjmp	.+200    	; 0x175e <HLCD_VoidLcdIint+0x154>
	else if (__tmp > 65535)
    1696:	fe 01       	movw	r30, r28
    1698:	eb 5b       	subi	r30, 0xBB	; 187
    169a:	ff 4f       	sbci	r31, 0xFF	; 255
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	3f ef       	ldi	r19, 0xFF	; 255
    16a8:	4f e7       	ldi	r20, 0x7F	; 127
    16aa:	57 e4       	ldi	r21, 0x47	; 71
    16ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16b0:	18 16       	cp	r1, r24
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <HLCD_VoidLcdIint+0xac>
    16b4:	43 c0       	rjmp	.+134    	; 0x173c <HLCD_VoidLcdIint+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b6:	fe 01       	movw	r30, r28
    16b8:	e7 5b       	subi	r30, 0xB7	; 183
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	40 e2       	ldi	r20, 0x20	; 32
    16ca:	51 e4       	ldi	r21, 0x41	; 65
    16cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8e 01       	movw	r16, r28
    16d6:	0d 5b       	subi	r16, 0xBD	; 189
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	f8 01       	movw	r30, r16
    16e8:	91 83       	std	Z+1, r25	; 0x01
    16ea:	80 83       	st	Z, r24
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <HLCD_VoidLcdIint+0x122>
    16ee:	fe 01       	movw	r30, r28
    16f0:	ef 5b       	subi	r30, 0xBF	; 191
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	88 ec       	ldi	r24, 0xC8	; 200
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16fc:	fe 01       	movw	r30, r28
    16fe:	ef 5b       	subi	r30, 0xBF	; 191
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	91 81       	ldd	r25, Z+1	; 0x01
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	f1 f7       	brne	.-4      	; 0x1706 <HLCD_VoidLcdIint+0xfc>
    170a:	fe 01       	movw	r30, r28
    170c:	ef 5b       	subi	r30, 0xBF	; 191
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	91 83       	std	Z+1, r25	; 0x01
    1712:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	de 01       	movw	r26, r28
    1716:	ad 5b       	subi	r26, 0xBD	; 189
    1718:	bf 4f       	sbci	r27, 0xFF	; 255
    171a:	fe 01       	movw	r30, r28
    171c:	ed 5b       	subi	r30, 0xBD	; 189
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	91 81       	ldd	r25, Z+1	; 0x01
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	11 96       	adiw	r26, 0x01	; 1
    1728:	9c 93       	st	X, r25
    172a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172c:	fe 01       	movw	r30, r28
    172e:	ed 5b       	subi	r30, 0xBD	; 189
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 81       	ld	r24, Z
    1734:	91 81       	ldd	r25, Z+1	; 0x01
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	d1 f6       	brne	.-76     	; 0x16ee <HLCD_VoidLcdIint+0xe4>
    173a:	24 c0       	rjmp	.+72     	; 0x1784 <HLCD_VoidLcdIint+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	8e 01       	movw	r16, r28
    173e:	0d 5b       	subi	r16, 0xBD	; 189
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	fe 01       	movw	r30, r28
    1744:	eb 5b       	subi	r30, 0xBB	; 187
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	f8 01       	movw	r30, r16
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	fe 01       	movw	r30, r28
    1760:	ed 5b       	subi	r30, 0xBD	; 189
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	80 81       	ld	r24, Z
    1766:	91 81       	ldd	r25, Z+1	; 0x01
    1768:	fe 01       	movw	r30, r28
    176a:	ff 96       	adiw	r30, 0x3f	; 63
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
    1770:	fe 01       	movw	r30, r28
    1772:	ff 96       	adiw	r30, 0x3f	; 63
    1774:	80 81       	ld	r24, Z
    1776:	91 81       	ldd	r25, Z+1	; 0x01
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <HLCD_VoidLcdIint+0x16e>
    177c:	fe 01       	movw	r30, r28
    177e:	ff 96       	adiw	r30, 0x3f	; 63
    1780:	91 83       	std	Z+1, r25	; 0x01
    1782:	80 83       	st	Z, r24
	/* Delay for 32 Ms*/
	_delay_ms(31);

	/* Send The INntialixation Command*/
	HLCD_VoidLcdWriteCmd(0x38);
    1784:	88 e3       	ldi	r24, 0x38	; 56
    1786:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e2       	ldi	r26, 0x20	; 32
    1790:	b2 e4       	ldi	r27, 0x42	; 66
    1792:	8b af       	std	Y+59, r24	; 0x3b
    1794:	9c af       	std	Y+60, r25	; 0x3c
    1796:	ad af       	std	Y+61, r26	; 0x3d
    1798:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    179a:	6b ad       	ldd	r22, Y+59	; 0x3b
    179c:	7c ad       	ldd	r23, Y+60	; 0x3c
    179e:	8d ad       	ldd	r24, Y+61	; 0x3d
    17a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    17a2:	2b ea       	ldi	r18, 0xAB	; 171
    17a4:	3a ea       	ldi	r19, 0xAA	; 170
    17a6:	4a e2       	ldi	r20, 0x2A	; 42
    17a8:	50 e4       	ldi	r21, 0x40	; 64
    17aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8f ab       	std	Y+55, r24	; 0x37
    17b4:	98 af       	std	Y+56, r25	; 0x38
    17b6:	a9 af       	std	Y+57, r26	; 0x39
    17b8:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    17ba:	6f a9       	ldd	r22, Y+55	; 0x37
    17bc:	78 ad       	ldd	r23, Y+56	; 0x38
    17be:	89 ad       	ldd	r24, Y+57	; 0x39
    17c0:	9a ad       	ldd	r25, Y+58	; 0x3a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	1c f4       	brge	.+6      	; 0x17d8 <HLCD_VoidLcdIint+0x1ce>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	8e ab       	std	Y+54, r24	; 0x36
    17d6:	91 c0       	rjmp	.+290    	; 0x18fa <HLCD_VoidLcdIint+0x2f0>
	else if (__tmp > 255)
    17d8:	6f a9       	ldd	r22, Y+55	; 0x37
    17da:	78 ad       	ldd	r23, Y+56	; 0x38
    17dc:	89 ad       	ldd	r24, Y+57	; 0x39
    17de:	9a ad       	ldd	r25, Y+58	; 0x3a
    17e0:	20 e0       	ldi	r18, 0x00	; 0
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	4f e7       	ldi	r20, 0x7F	; 127
    17e6:	53 e4       	ldi	r21, 0x43	; 67
    17e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17ec:	18 16       	cp	r1, r24
    17ee:	0c f0       	brlt	.+2      	; 0x17f2 <HLCD_VoidLcdIint+0x1e8>
    17f0:	7b c0       	rjmp	.+246    	; 0x18e8 <HLCD_VoidLcdIint+0x2de>
	{
		_delay_ms(__us / 1000.0);
    17f2:	6b ad       	ldd	r22, Y+59	; 0x3b
    17f4:	7c ad       	ldd	r23, Y+60	; 0x3c
    17f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	4a e7       	ldi	r20, 0x7A	; 122
    1800:	54 e4       	ldi	r21, 0x44	; 68
    1802:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	8a ab       	std	Y+50, r24	; 0x32
    180c:	9b ab       	std	Y+51, r25	; 0x33
    180e:	ac ab       	std	Y+52, r26	; 0x34
    1810:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1812:	6a a9       	ldd	r22, Y+50	; 0x32
    1814:	7b a9       	ldd	r23, Y+51	; 0x33
    1816:	8c a9       	ldd	r24, Y+52	; 0x34
    1818:	9d a9       	ldd	r25, Y+53	; 0x35
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	4a ef       	ldi	r20, 0xFA	; 250
    1820:	54 e4       	ldi	r21, 0x44	; 68
    1822:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	8e a7       	std	Y+46, r24	; 0x2e
    182c:	9f a7       	std	Y+47, r25	; 0x2f
    182e:	a8 ab       	std	Y+48, r26	; 0x30
    1830:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1832:	6e a5       	ldd	r22, Y+46	; 0x2e
    1834:	7f a5       	ldd	r23, Y+47	; 0x2f
    1836:	88 a9       	ldd	r24, Y+48	; 0x30
    1838:	99 a9       	ldd	r25, Y+49	; 0x31
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e8       	ldi	r20, 0x80	; 128
    1840:	5f e3       	ldi	r21, 0x3F	; 63
    1842:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1846:	88 23       	and	r24, r24
    1848:	2c f4       	brge	.+10     	; 0x1854 <HLCD_VoidLcdIint+0x24a>
		__ticks = 1;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	9d a7       	std	Y+45, r25	; 0x2d
    1850:	8c a7       	std	Y+44, r24	; 0x2c
    1852:	3f c0       	rjmp	.+126    	; 0x18d2 <HLCD_VoidLcdIint+0x2c8>
	else if (__tmp > 65535)
    1854:	6e a5       	ldd	r22, Y+46	; 0x2e
    1856:	7f a5       	ldd	r23, Y+47	; 0x2f
    1858:	88 a9       	ldd	r24, Y+48	; 0x30
    185a:	99 a9       	ldd	r25, Y+49	; 0x31
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	3f ef       	ldi	r19, 0xFF	; 255
    1860:	4f e7       	ldi	r20, 0x7F	; 127
    1862:	57 e4       	ldi	r21, 0x47	; 71
    1864:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1868:	18 16       	cp	r1, r24
    186a:	4c f5       	brge	.+82     	; 0x18be <HLCD_VoidLcdIint+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186c:	6a a9       	ldd	r22, Y+50	; 0x32
    186e:	7b a9       	ldd	r23, Y+51	; 0x33
    1870:	8c a9       	ldd	r24, Y+52	; 0x34
    1872:	9d a9       	ldd	r25, Y+53	; 0x35
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e2       	ldi	r20, 0x20	; 32
    187a:	51 e4       	ldi	r21, 0x41	; 65
    187c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	bc 01       	movw	r22, r24
    1886:	cd 01       	movw	r24, r26
    1888:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	9d a7       	std	Y+45, r25	; 0x2d
    1892:	8c a7       	std	Y+44, r24	; 0x2c
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <HLCD_VoidLcdIint+0x2aa>
    1896:	88 ec       	ldi	r24, 0xC8	; 200
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	9b a7       	std	Y+43, r25	; 0x2b
    189c:	8a a7       	std	Y+42, r24	; 0x2a
    189e:	8a a5       	ldd	r24, Y+42	; 0x2a
    18a0:	9b a5       	ldd	r25, Y+43	; 0x2b
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <HLCD_VoidLcdIint+0x298>
    18a6:	9b a7       	std	Y+43, r25	; 0x2b
    18a8:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    18ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	9d a7       	std	Y+45, r25	; 0x2d
    18b2:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b4:	8c a5       	ldd	r24, Y+44	; 0x2c
    18b6:	9d a5       	ldd	r25, Y+45	; 0x2d
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f7       	brne	.-38     	; 0x1896 <HLCD_VoidLcdIint+0x28c>
    18bc:	24 c0       	rjmp	.+72     	; 0x1906 <HLCD_VoidLcdIint+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18be:	6e a5       	ldd	r22, Y+46	; 0x2e
    18c0:	7f a5       	ldd	r23, Y+47	; 0x2f
    18c2:	88 a9       	ldd	r24, Y+48	; 0x30
    18c4:	99 a9       	ldd	r25, Y+49	; 0x31
    18c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	9d a7       	std	Y+45, r25	; 0x2d
    18d0:	8c a7       	std	Y+44, r24	; 0x2c
    18d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    18d4:	9d a5       	ldd	r25, Y+45	; 0x2d
    18d6:	99 a7       	std	Y+41, r25	; 0x29
    18d8:	88 a7       	std	Y+40, r24	; 0x28
    18da:	88 a5       	ldd	r24, Y+40	; 0x28
    18dc:	99 a5       	ldd	r25, Y+41	; 0x29
    18de:	01 97       	sbiw	r24, 0x01	; 1
    18e0:	f1 f7       	brne	.-4      	; 0x18de <HLCD_VoidLcdIint+0x2d4>
    18e2:	99 a7       	std	Y+41, r25	; 0x29
    18e4:	88 a7       	std	Y+40, r24	; 0x28
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <HLCD_VoidLcdIint+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18e8:	6f a9       	ldd	r22, Y+55	; 0x37
    18ea:	78 ad       	ldd	r23, Y+56	; 0x38
    18ec:	89 ad       	ldd	r24, Y+57	; 0x39
    18ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    18f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8e ab       	std	Y+54, r24	; 0x36
    18fa:	8e a9       	ldd	r24, Y+54	; 0x36
    18fc:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18fe:	8f a1       	ldd	r24, Y+39	; 0x27
    1900:	8a 95       	dec	r24
    1902:	f1 f7       	brne	.-4      	; 0x1900 <HLCD_VoidLcdIint+0x2f6>
    1904:	8f a3       	std	Y+39, r24	; 0x27

	/*Delay for 1 Ms*/
	_delay_us(40);

	/* Display ON/OFF Control*/
	HLCD_VoidLcdWriteCmd(0x0f);
    1906:	8f e0       	ldi	r24, 0x0F	; 15
    1908:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 e2       	ldi	r26, 0x20	; 32
    1912:	b2 e4       	ldi	r27, 0x42	; 66
    1914:	8b a3       	std	Y+35, r24	; 0x23
    1916:	9c a3       	std	Y+36, r25	; 0x24
    1918:	ad a3       	std	Y+37, r26	; 0x25
    191a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    191c:	6b a1       	ldd	r22, Y+35	; 0x23
    191e:	7c a1       	ldd	r23, Y+36	; 0x24
    1920:	8d a1       	ldd	r24, Y+37	; 0x25
    1922:	9e a1       	ldd	r25, Y+38	; 0x26
    1924:	2b ea       	ldi	r18, 0xAB	; 171
    1926:	3a ea       	ldi	r19, 0xAA	; 170
    1928:	4a e2       	ldi	r20, 0x2A	; 42
    192a:	50 e4       	ldi	r21, 0x40	; 64
    192c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	8f 8f       	std	Y+31, r24	; 0x1f
    1936:	98 a3       	std	Y+32, r25	; 0x20
    1938:	a9 a3       	std	Y+33, r26	; 0x21
    193a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    193c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    193e:	78 a1       	ldd	r23, Y+32	; 0x20
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	1c f4       	brge	.+6      	; 0x195a <HLCD_VoidLcdIint+0x350>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	8e 8f       	std	Y+30, r24	; 0x1e
    1958:	91 c0       	rjmp	.+290    	; 0x1a7c <HLCD_VoidLcdIint+0x472>
	else if (__tmp > 255)
    195a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    195c:	78 a1       	ldd	r23, Y+32	; 0x20
    195e:	89 a1       	ldd	r24, Y+33	; 0x21
    1960:	9a a1       	ldd	r25, Y+34	; 0x22
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4f e7       	ldi	r20, 0x7F	; 127
    1968:	53 e4       	ldi	r21, 0x43	; 67
    196a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    196e:	18 16       	cp	r1, r24
    1970:	0c f0       	brlt	.+2      	; 0x1974 <HLCD_VoidLcdIint+0x36a>
    1972:	7b c0       	rjmp	.+246    	; 0x1a6a <HLCD_VoidLcdIint+0x460>
	{
		_delay_ms(__us / 1000.0);
    1974:	6b a1       	ldd	r22, Y+35	; 0x23
    1976:	7c a1       	ldd	r23, Y+36	; 0x24
    1978:	8d a1       	ldd	r24, Y+37	; 0x25
    197a:	9e a1       	ldd	r25, Y+38	; 0x26
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	54 e4       	ldi	r21, 0x44	; 68
    1984:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	8a 8f       	std	Y+26, r24	; 0x1a
    198e:	9b 8f       	std	Y+27, r25	; 0x1b
    1990:	ac 8f       	std	Y+28, r26	; 0x1c
    1992:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1996:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1998:	8c 8d       	ldd	r24, Y+28	; 0x1c
    199a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4a ef       	ldi	r20, 0xFA	; 250
    19a2:	54 e4       	ldi	r21, 0x44	; 68
    19a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	8e 8b       	std	Y+22, r24	; 0x16
    19ae:	9f 8b       	std	Y+23, r25	; 0x17
    19b0:	a8 8f       	std	Y+24, r26	; 0x18
    19b2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    19b4:	6e 89       	ldd	r22, Y+22	; 0x16
    19b6:	7f 89       	ldd	r23, Y+23	; 0x17
    19b8:	88 8d       	ldd	r24, Y+24	; 0x18
    19ba:	99 8d       	ldd	r25, Y+25	; 0x19
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <HLCD_VoidLcdIint+0x3cc>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9d 8b       	std	Y+21, r25	; 0x15
    19d2:	8c 8b       	std	Y+20, r24	; 0x14
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <HLCD_VoidLcdIint+0x44a>
	else if (__tmp > 65535)
    19d6:	6e 89       	ldd	r22, Y+22	; 0x16
    19d8:	7f 89       	ldd	r23, Y+23	; 0x17
    19da:	88 8d       	ldd	r24, Y+24	; 0x18
    19dc:	99 8d       	ldd	r25, Y+25	; 0x19
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	4c f5       	brge	.+82     	; 0x1a40 <HLCD_VoidLcdIint+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ee:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19f0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	51 e4       	ldi	r21, 0x41	; 65
    19fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9d 8b       	std	Y+21, r25	; 0x15
    1a14:	8c 8b       	std	Y+20, r24	; 0x14
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <HLCD_VoidLcdIint+0x42c>
    1a18:	88 ec       	ldi	r24, 0xC8	; 200
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	9b 8b       	std	Y+19, r25	; 0x13
    1a1e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a20:	8a 89       	ldd	r24, Y+18	; 0x12
    1a22:	9b 89       	ldd	r25, Y+19	; 0x13
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <HLCD_VoidLcdIint+0x41a>
    1a28:	9b 8b       	std	Y+19, r25	; 0x13
    1a2a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	8c 89       	ldd	r24, Y+20	; 0x14
    1a2e:	9d 89       	ldd	r25, Y+21	; 0x15
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9d 8b       	std	Y+21, r25	; 0x15
    1a34:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	8c 89       	ldd	r24, Y+20	; 0x14
    1a38:	9d 89       	ldd	r25, Y+21	; 0x15
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	69 f7       	brne	.-38     	; 0x1a18 <HLCD_VoidLcdIint+0x40e>
    1a3e:	24 c0       	rjmp	.+72     	; 0x1a88 <HLCD_VoidLcdIint+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	6e 89       	ldd	r22, Y+22	; 0x16
    1a42:	7f 89       	ldd	r23, Y+23	; 0x17
    1a44:	88 8d       	ldd	r24, Y+24	; 0x18
    1a46:	99 8d       	ldd	r25, Y+25	; 0x19
    1a48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9d 8b       	std	Y+21, r25	; 0x15
    1a52:	8c 8b       	std	Y+20, r24	; 0x14
    1a54:	8c 89       	ldd	r24, Y+20	; 0x14
    1a56:	9d 89       	ldd	r25, Y+21	; 0x15
    1a58:	99 8b       	std	Y+17, r25	; 0x11
    1a5a:	88 8b       	std	Y+16, r24	; 0x10
    1a5c:	88 89       	ldd	r24, Y+16	; 0x10
    1a5e:	99 89       	ldd	r25, Y+17	; 0x11
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <HLCD_VoidLcdIint+0x456>
    1a64:	99 8b       	std	Y+17, r25	; 0x11
    1a66:	88 8b       	std	Y+16, r24	; 0x10
    1a68:	0f c0       	rjmp	.+30     	; 0x1a88 <HLCD_VoidLcdIint+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a6a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a6c:	78 a1       	ldd	r23, Y+32	; 0x20
    1a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a70:	9a a1       	ldd	r25, Y+34	; 0x22
    1a72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a82:	8a 95       	dec	r24
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <HLCD_VoidLcdIint+0x478>
    1a86:	8f 87       	std	Y+15, r24	; 0x0f

	/*Delay for 1 Ms*/
	_delay_us(40);

	/* Display Clear*/
	HLCD_VoidLcdWriteCmd(0x01);
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e0       	ldi	r26, 0x00	; 0
    1a94:	b0 e4       	ldi	r27, 0x40	; 64
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	ad 87       	std	Y+13, r26	; 0x0d
    1a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a ef       	ldi	r20, 0xFA	; 250
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8f 83       	std	Y+7, r24	; 0x07
    1ab8:	98 87       	std	Y+8, r25	; 0x08
    1aba:	a9 87       	std	Y+9, r26	; 0x09
    1abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <HLCD_VoidLcdIint+0x4d6>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <HLCD_VoidLcdIint+0x554>
	else if (__tmp > 65535)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <HLCD_VoidLcdIint+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <HLCD_VoidLcdIint+0x536>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <HLCD_VoidLcdIint+0x524>
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <HLCD_VoidLcdIint+0x518>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <HLCD_VoidLcdIint+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <HLCD_VoidLcdIint+0x560>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01

	/*Delay for 1 Ms*/
	_delay_ms(2);

	/* Display Entery Mode Set*/
	HLCD_VoidLcdWriteCmd(0x06);
    1b72:	86 e0       	ldi	r24, 0x06	; 6
    1b74:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
}
    1b78:	c4 5b       	subi	r28, 0xB4	; 180
    1b7a:	df 4f       	sbci	r29, 0xFF	; 255
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	08 95       	ret

00001b90 <HLCD_VoidLcdWriteCmd>:

void HLCD_VoidLcdWriteCmd(u8 Copy_u8Cmd)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	69 97       	sbiw	r28, 0x19	; 25
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	f8 94       	cli
    1b9e:	de bf       	out	0x3e, r29	; 62
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	cd bf       	out	0x3d, r28	; 61
    1ba4:	89 8f       	std	Y+25, r24	; 0x19

	/*	RS pin  = 0 ==> Select Command Register*/
	MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_LOW);
    1ba6:	83 e0       	ldi	r24, 0x03	; 3
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>

	/*	R/W pin  = 0 ==> Select Write Mode*/
	MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	61 e0       	ldi	r22, 0x01	; 1
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>

	/*	E pin  = 1 ==> Enable the command */
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	62 e0       	ldi	r22, 0x02	; 2
    1bbe:	41 e0       	ldi	r20, 0x01	; 1
    1bc0:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>

	/*	Write Command */
	MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Cmd);
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bc8:	0e 94 c5 09 	call	0x138a	; 0x138a <MDIO_u8SetPortValue>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a0 e8       	ldi	r26, 0x80	; 128
    1bd2:	bf e3       	ldi	r27, 0x3F	; 63
    1bd4:	8d 8b       	std	Y+21, r24	; 0x15
    1bd6:	9e 8b       	std	Y+22, r25	; 0x16
    1bd8:	af 8b       	std	Y+23, r26	; 0x17
    1bda:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bde:	7e 89       	ldd	r23, Y+22	; 0x16
    1be0:	8f 89       	ldd	r24, Y+23	; 0x17
    1be2:	98 8d       	ldd	r25, Y+24	; 0x18
    1be4:	2b ea       	ldi	r18, 0xAB	; 171
    1be6:	3a ea       	ldi	r19, 0xAA	; 170
    1be8:	4a e2       	ldi	r20, 0x2A	; 42
    1bea:	50 e4       	ldi	r21, 0x40	; 64
    1bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	89 8b       	std	Y+17, r24	; 0x11
    1bf6:	9a 8b       	std	Y+18, r25	; 0x12
    1bf8:	ab 8b       	std	Y+19, r26	; 0x13
    1bfa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1bfc:	69 89       	ldd	r22, Y+17	; 0x11
    1bfe:	7a 89       	ldd	r23, Y+18	; 0x12
    1c00:	8b 89       	ldd	r24, Y+19	; 0x13
    1c02:	9c 89       	ldd	r25, Y+20	; 0x14
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 e8       	ldi	r20, 0x80	; 128
    1c0a:	5f e3       	ldi	r21, 0x3F	; 63
    1c0c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c10:	88 23       	and	r24, r24
    1c12:	1c f4       	brge	.+6      	; 0x1c1a <HLCD_VoidLcdWriteCmd+0x8a>
		__ticks = 1;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	88 8b       	std	Y+16, r24	; 0x10
    1c18:	91 c0       	rjmp	.+290    	; 0x1d3c <HLCD_VoidLcdWriteCmd+0x1ac>
	else if (__tmp > 255)
    1c1a:	69 89       	ldd	r22, Y+17	; 0x11
    1c1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4f e7       	ldi	r20, 0x7F	; 127
    1c28:	53 e4       	ldi	r21, 0x43	; 67
    1c2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c2e:	18 16       	cp	r1, r24
    1c30:	0c f0       	brlt	.+2      	; 0x1c34 <HLCD_VoidLcdWriteCmd+0xa4>
    1c32:	7b c0       	rjmp	.+246    	; 0x1d2a <HLCD_VoidLcdWriteCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1c34:	6d 89       	ldd	r22, Y+21	; 0x15
    1c36:	7e 89       	ldd	r23, Y+22	; 0x16
    1c38:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	4a e7       	ldi	r20, 0x7A	; 122
    1c42:	54 e4       	ldi	r21, 0x44	; 68
    1c44:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	8c 87       	std	Y+12, r24	; 0x0c
    1c4e:	9d 87       	std	Y+13, r25	; 0x0d
    1c50:	ae 87       	std	Y+14, r26	; 0x0e
    1c52:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c54:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c56:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c5c:	20 e0       	ldi	r18, 0x00	; 0
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	4a ef       	ldi	r20, 0xFA	; 250
    1c62:	54 e4       	ldi	r21, 0x44	; 68
    1c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	88 87       	std	Y+8, r24	; 0x08
    1c6e:	99 87       	std	Y+9, r25	; 0x09
    1c70:	aa 87       	std	Y+10, r26	; 0x0a
    1c72:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c74:	68 85       	ldd	r22, Y+8	; 0x08
    1c76:	79 85       	ldd	r23, Y+9	; 0x09
    1c78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e8       	ldi	r20, 0x80	; 128
    1c82:	5f e3       	ldi	r21, 0x3F	; 63
    1c84:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c88:	88 23       	and	r24, r24
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <HLCD_VoidLcdWriteCmd+0x106>
		__ticks = 1;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9f 83       	std	Y+7, r25	; 0x07
    1c92:	8e 83       	std	Y+6, r24	; 0x06
    1c94:	3f c0       	rjmp	.+126    	; 0x1d14 <HLCD_VoidLcdWriteCmd+0x184>
	else if (__tmp > 65535)
    1c96:	68 85       	ldd	r22, Y+8	; 0x08
    1c98:	79 85       	ldd	r23, Y+9	; 0x09
    1c9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	3f ef       	ldi	r19, 0xFF	; 255
    1ca2:	4f e7       	ldi	r20, 0x7F	; 127
    1ca4:	57 e4       	ldi	r21, 0x47	; 71
    1ca6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1caa:	18 16       	cp	r1, r24
    1cac:	4c f5       	brge	.+82     	; 0x1d00 <HLCD_VoidLcdWriteCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cae:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	cd 01       	movw	r24, r26
    1cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9f 83       	std	Y+7, r25	; 0x07
    1cd4:	8e 83       	std	Y+6, r24	; 0x06
    1cd6:	0f c0       	rjmp	.+30     	; 0x1cf6 <HLCD_VoidLcdWriteCmd+0x166>
    1cd8:	88 ec       	ldi	r24, 0xC8	; 200
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	9d 83       	std	Y+5, r25	; 0x05
    1cde:	8c 83       	std	Y+4, r24	; 0x04
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <HLCD_VoidLcdWriteCmd+0x154>
    1ce8:	9d 83       	std	Y+5, r25	; 0x05
    1cea:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	8e 81       	ldd	r24, Y+6	; 0x06
    1cee:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	9f 83       	std	Y+7, r25	; 0x07
    1cf4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	69 f7       	brne	.-38     	; 0x1cd8 <HLCD_VoidLcdWriteCmd+0x148>
    1cfe:	24 c0       	rjmp	.+72     	; 0x1d48 <HLCD_VoidLcdWriteCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	68 85       	ldd	r22, Y+8	; 0x08
    1d02:	79 85       	ldd	r23, Y+9	; 0x09
    1d04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9f 83       	std	Y+7, r25	; 0x07
    1d12:	8e 83       	std	Y+6, r24	; 0x06
    1d14:	8e 81       	ldd	r24, Y+6	; 0x06
    1d16:	9f 81       	ldd	r25, Y+7	; 0x07
    1d18:	9b 83       	std	Y+3, r25	; 0x03
    1d1a:	8a 83       	std	Y+2, r24	; 0x02
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <HLCD_VoidLcdWriteCmd+0x190>
    1d24:	9b 83       	std	Y+3, r25	; 0x03
    1d26:	8a 83       	std	Y+2, r24	; 0x02
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <HLCD_VoidLcdWriteCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d2a:	69 89       	ldd	r22, Y+17	; 0x11
    1d2c:	7a 89       	ldd	r23, Y+18	; 0x12
    1d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1d30:	9c 89       	ldd	r25, Y+20	; 0x14
    1d32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	88 8b       	std	Y+16, r24	; 0x10
    1d3c:	88 89       	ldd	r24, Y+16	; 0x10
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	8a 95       	dec	r24
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <HLCD_VoidLcdWriteCmd+0x1b2>
    1d46:	89 83       	std	Y+1, r24	; 0x01

	/*	Wait for 230 ns */
	_delay_us(1);

	/*	E pin  = 0 ==> Disable the command*/
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	62 e0       	ldi	r22, 0x02	; 2
    1d4c:	40 e0       	ldi	r20, 0x00	; 0
    1d4e:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>
}
    1d52:	69 96       	adiw	r28, 0x19	; 25
    1d54:	0f b6       	in	r0, 0x3f	; 63
    1d56:	f8 94       	cli
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	0f be       	out	0x3f, r0	; 63
    1d5c:	cd bf       	out	0x3d, r28	; 61
    1d5e:	cf 91       	pop	r28
    1d60:	df 91       	pop	r29
    1d62:	08 95       	ret

00001d64 <HLCD_VoidLcdWriteChar>:

void HLCD_VoidLcdWriteChar(u8 Copy_u8Char)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	69 97       	sbiw	r28, 0x19	; 25
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	89 8f       	std	Y+25, r24	; 0x19

	/*	RS pin  = 0 ==> Select Command Register*/
	MDIO_u8SetPinValue(HLCD_RS_PORT, HLCD_RS_PIN, MDIO_HIGH);
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>

	/*	R/W pin  = 0 ==> Select Write Mode*/
	MDIO_u8SetPinValue(HLCD_RW_PORT, HLCD_RW_PIN, MDIO_LOW);
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>

	/*	E pin  = 1 ==> Enable the command */
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_HIGH);
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>

	/*	Write Command */
	MDIO_u8SetPortValue(HLCD_DATA_PORT, Copy_u8Char);
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d9c:	0e 94 c5 09 	call	0x138a	; 0x138a <MDIO_u8SetPortValue>
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	a0 e8       	ldi	r26, 0x80	; 128
    1da6:	bf e3       	ldi	r27, 0x3F	; 63
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
    1daa:	9e 8b       	std	Y+22, r25	; 0x16
    1dac:	af 8b       	std	Y+23, r26	; 0x17
    1dae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	2b ea       	ldi	r18, 0xAB	; 171
    1dba:	3a ea       	ldi	r19, 0xAA	; 170
    1dbc:	4a e2       	ldi	r20, 0x2A	; 42
    1dbe:	50 e4       	ldi	r21, 0x40	; 64
    1dc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	89 8b       	std	Y+17, r24	; 0x11
    1dca:	9a 8b       	std	Y+18, r25	; 0x12
    1dcc:	ab 8b       	std	Y+19, r26	; 0x13
    1dce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1dd0:	69 89       	ldd	r22, Y+17	; 0x11
    1dd2:	7a 89       	ldd	r23, Y+18	; 0x12
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e8       	ldi	r20, 0x80	; 128
    1dde:	5f e3       	ldi	r21, 0x3F	; 63
    1de0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	1c f4       	brge	.+6      	; 0x1dee <HLCD_VoidLcdWriteChar+0x8a>
		__ticks = 1;
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	88 8b       	std	Y+16, r24	; 0x10
    1dec:	91 c0       	rjmp	.+290    	; 0x1f10 <HLCD_VoidLcdWriteChar+0x1ac>
	else if (__tmp > 255)
    1dee:	69 89       	ldd	r22, Y+17	; 0x11
    1df0:	7a 89       	ldd	r23, Y+18	; 0x12
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4f e7       	ldi	r20, 0x7F	; 127
    1dfc:	53 e4       	ldi	r21, 0x43	; 67
    1dfe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e02:	18 16       	cp	r1, r24
    1e04:	0c f0       	brlt	.+2      	; 0x1e08 <HLCD_VoidLcdWriteChar+0xa4>
    1e06:	7b c0       	rjmp	.+246    	; 0x1efe <HLCD_VoidLcdWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	4a e7       	ldi	r20, 0x7A	; 122
    1e16:	54 e4       	ldi	r21, 0x44	; 68
    1e18:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8c 87       	std	Y+12, r24	; 0x0c
    1e22:	9d 87       	std	Y+13, r25	; 0x0d
    1e24:	ae 87       	std	Y+14, r26	; 0x0e
    1e26:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e2a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e2c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e2e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4a ef       	ldi	r20, 0xFA	; 250
    1e36:	54 e4       	ldi	r21, 0x44	; 68
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	88 87       	std	Y+8, r24	; 0x08
    1e42:	99 87       	std	Y+9, r25	; 0x09
    1e44:	aa 87       	std	Y+10, r26	; 0x0a
    1e46:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1e48:	68 85       	ldd	r22, Y+8	; 0x08
    1e4a:	79 85       	ldd	r23, Y+9	; 0x09
    1e4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <HLCD_VoidLcdWriteChar+0x106>
		__ticks = 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	9f 83       	std	Y+7, r25	; 0x07
    1e66:	8e 83       	std	Y+6, r24	; 0x06
    1e68:	3f c0       	rjmp	.+126    	; 0x1ee8 <HLCD_VoidLcdWriteChar+0x184>
	else if (__tmp > 65535)
    1e6a:	68 85       	ldd	r22, Y+8	; 0x08
    1e6c:	79 85       	ldd	r23, Y+9	; 0x09
    1e6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	3f ef       	ldi	r19, 0xFF	; 255
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	57 e4       	ldi	r21, 0x47	; 71
    1e7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	4c f5       	brge	.+82     	; 0x1ed4 <HLCD_VoidLcdWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e82:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e84:	7d 85       	ldd	r23, Y+13	; 0x0d
    1e86:	8e 85       	ldd	r24, Y+14	; 0x0e
    1e88:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e2       	ldi	r20, 0x20	; 32
    1e90:	51 e4       	ldi	r21, 0x41	; 65
    1e92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	9f 83       	std	Y+7, r25	; 0x07
    1ea8:	8e 83       	std	Y+6, r24	; 0x06
    1eaa:	0f c0       	rjmp	.+30     	; 0x1eca <HLCD_VoidLcdWriteChar+0x166>
    1eac:	88 ec       	ldi	r24, 0xC8	; 200
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9d 83       	std	Y+5, r25	; 0x05
    1eb2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	f1 f7       	brne	.-4      	; 0x1eb8 <HLCD_VoidLcdWriteChar+0x154>
    1ebc:	9d 83       	std	Y+5, r25	; 0x05
    1ebe:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	9f 83       	std	Y+7, r25	; 0x07
    1ec8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ecc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ece:	00 97       	sbiw	r24, 0x00	; 0
    1ed0:	69 f7       	brne	.-38     	; 0x1eac <HLCD_VoidLcdWriteChar+0x148>
    1ed2:	24 c0       	rjmp	.+72     	; 0x1f1c <HLCD_VoidLcdWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed4:	68 85       	ldd	r22, Y+8	; 0x08
    1ed6:	79 85       	ldd	r23, Y+9	; 0x09
    1ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1edc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9f 83       	std	Y+7, r25	; 0x07
    1ee6:	8e 83       	std	Y+6, r24	; 0x06
    1ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eea:	9f 81       	ldd	r25, Y+7	; 0x07
    1eec:	9b 83       	std	Y+3, r25	; 0x03
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <HLCD_VoidLcdWriteChar+0x190>
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <HLCD_VoidLcdWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1efe:	69 89       	ldd	r22, Y+17	; 0x11
    1f00:	7a 89       	ldd	r23, Y+18	; 0x12
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	88 8b       	std	Y+16, r24	; 0x10
    1f10:	88 89       	ldd	r24, Y+16	; 0x10
    1f12:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	8a 95       	dec	r24
    1f18:	f1 f7       	brne	.-4      	; 0x1f16 <HLCD_VoidLcdWriteChar+0x1b2>
    1f1a:	89 83       	std	Y+1, r24	; 0x01

	/*	Wait for 230 ns */
	_delay_us(1);

	/*	E pin  = 0 ==> Disable the command*/
	MDIO_u8SetPinValue(HLCD_EN_PORT, HLCD_EN_PIN, MDIO_LOW);
    1f1c:	83 e0       	ldi	r24, 0x03	; 3
    1f1e:	62 e0       	ldi	r22, 0x02	; 2
    1f20:	40 e0       	ldi	r20, 0x00	; 0
    1f22:	0e 94 bf 08 	call	0x117e	; 0x117e <MDIO_u8SetPinValue>
}
    1f26:	69 96       	adiw	r28, 0x19	; 25
    1f28:	0f b6       	in	r0, 0x3f	; 63
    1f2a:	f8 94       	cli
    1f2c:	de bf       	out	0x3e, r29	; 62
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	cd bf       	out	0x3d, r28	; 61
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <HLCD_VoidSetCurser>:
u8 HLCD_VoidSetCurser(u8 Copy_u8LineNb, u8 Copy_u8CharNb)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <HLCD_VoidSetCurser+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <HLCD_VoidSetCurser+0x8>
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	8a 83       	std	Y+2, r24	; 0x02
    1f48:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPE_OK;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	89 83       	std	Y+1, r24	; 0x01

	switch (Copy_u8LineNb)
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3d 83       	std	Y+5, r19	; 0x05
    1f56:	2c 83       	std	Y+4, r18	; 0x04
    1f58:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	31 f0       	breq	.+12     	; 0x1f6e <HLCD_VoidSetCurser+0x36>
    1f62:	2c 81       	ldd	r18, Y+4	; 0x04
    1f64:	3d 81       	ldd	r19, Y+5	; 0x05
    1f66:	22 30       	cpi	r18, 0x02	; 2
    1f68:	31 05       	cpc	r19, r1
    1f6a:	31 f0       	breq	.+12     	; 0x1f78 <HLCD_VoidSetCurser+0x40>
    1f6c:	0a c0       	rjmp	.+20     	; 0x1f82 <HLCD_VoidSetCurser+0x4a>
	{
	case HLCD_LINE_1:
		HLCD_VoidLcdWriteCmd(0x80 + Copy_u8CharNb);
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	80 58       	subi	r24, 0x80	; 128
    1f72:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    1f76:	06 c0       	rjmp	.+12     	; 0x1f84 <HLCD_VoidSetCurser+0x4c>
		break;
	case HLCD_LINE_2:
		HLCD_VoidLcdWriteCmd(0xc0 + Copy_u8CharNb);
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	80 54       	subi	r24, 0x40	; 64
    1f7c:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    1f80:	01 c0       	rjmp	.+2      	; 0x1f84 <HLCD_VoidSetCurser+0x4c>
		break;
	default:
		Local_u8ErrorState = STD_TYPE_NOK;
    1f82:	19 82       	std	Y+1, r1	; 0x01
		break;
	}

	return Local_u8ErrorState;
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <HLCD_u8WriteStr>:
u8 HLCD_u8WriteStr(const char *Copy_pcStr)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <HLCD_u8WriteStr+0x6>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <HLCD_u8WriteStr+0x8>
    1f9e:	00 d0       	rcall	.+0      	; 0x1fa0 <HLCD_u8WriteStr+0xa>
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	9d 83       	std	Y+5, r25	; 0x05
    1fa6:	8c 83       	std	Y+4, r24	; 0x04
    u8 Local_u8ErrorState = STD_TYPE_OK;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	8b 83       	std	Y+3, r24	; 0x03

    if (Copy_pcStr == STD_TYPE_POINTER_NULL)
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	11 f4       	brne	.+4      	; 0x1fb8 <HLCD_u8WriteStr+0x22>
    {
        return STD_TYPE_NOK; // Error if null pointer is passed
    1fb4:	1e 82       	std	Y+6, r1	; 0x06
    1fb6:	33 c0       	rjmp	.+102    	; 0x201e <HLCD_u8WriteStr+0x88>
    }

    // Starting position
    u8 Line = HLCD_LINE_1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	8a 83       	std	Y+2, r24	; 0x02
    u8 CharPos = 0;
    1fbc:	19 82       	std	Y+1, r1	; 0x01
    1fbe:	28 c0       	rjmp	.+80     	; 0x2010 <HLCD_u8WriteStr+0x7a>

    // Write characters until the end of the string
    while (*Copy_pcStr)
    {
        // If we reach the end of the first line, switch to the second line
        if (CharPos >= 16 && Line == HLCD_LINE_1)
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	80 31       	cpi	r24, 0x10	; 16
    1fc4:	50 f0       	brcs	.+20     	; 0x1fda <HLCD_u8WriteStr+0x44>
    1fc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc8:	81 30       	cpi	r24, 0x01	; 1
    1fca:	39 f4       	brne	.+14     	; 0x1fda <HLCD_u8WriteStr+0x44>
        {
            Line = HLCD_LINE_2;
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the second line
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	69 81       	ldd	r22, Y+1	; 0x01
    1fd6:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <HLCD_VoidSetCurser>
        }

        // If we reach the end of the second line, wrap around to the start of the first line
        if (CharPos >= 16 && Line == HLCD_LINE_2)
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	80 31       	cpi	r24, 0x10	; 16
    1fde:	50 f0       	brcs	.+20     	; 0x1ff4 <HLCD_u8WriteStr+0x5e>
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	82 30       	cpi	r24, 0x02	; 2
    1fe4:	39 f4       	brne	.+14     	; 0x1ff4 <HLCD_u8WriteStr+0x5e>
        {
            Line = HLCD_LINE_1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
            CharPos = 0;
    1fea:	19 82       	std	Y+1, r1	; 0x01
            HLCD_VoidSetCurser(Line, CharPos); // Move cursor to start of the first line
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	69 81       	ldd	r22, Y+1	; 0x01
    1ff0:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <HLCD_VoidSetCurser>
        }

        // Write the current character to the LCD
        HLCD_VoidLcdWriteChar(*Copy_pcStr++);
    1ff4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ff6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ff8:	20 81       	ld	r18, Z
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	01 96       	adiw	r24, 0x01	; 1
    2000:	9d 83       	std	Y+5, r25	; 0x05
    2002:	8c 83       	std	Y+4, r24	; 0x04
    2004:	82 2f       	mov	r24, r18
    2006:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>

        // Increment character position
        CharPos++;
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	8f 5f       	subi	r24, 0xFF	; 255
    200e:	89 83       	std	Y+1, r24	; 0x01
    // Starting position
    u8 Line = HLCD_LINE_1;
    u8 CharPos = 0;

    // Write characters until the end of the string
    while (*Copy_pcStr)
    2010:	ec 81       	ldd	r30, Y+4	; 0x04
    2012:	fd 81       	ldd	r31, Y+5	; 0x05
    2014:	80 81       	ld	r24, Z
    2016:	88 23       	and	r24, r24
    2018:	99 f6       	brne	.-90     	; 0x1fc0 <HLCD_u8WriteStr+0x2a>

        // Increment character position
        CharPos++;
    }

    return Local_u8ErrorState;
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	8e 83       	std	Y+6, r24	; 0x06
    201e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2020:	26 96       	adiw	r28, 0x06	; 6
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	08 95       	ret

00002032 <HLCD_VoidLcdClear>:
void HLCD_VoidLcdClear(void)
{
    2032:	df 93       	push	r29
    2034:	cf 93       	push	r28
    2036:	cd b7       	in	r28, 0x3d	; 61
    2038:	de b7       	in	r29, 0x3e	; 62
    203a:	2e 97       	sbiw	r28, 0x0e	; 14
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    // Send the clear display command (0x01) to the LCD
    HLCD_VoidLcdWriteCmd(0x01);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	a0 e0       	ldi	r26, 0x00	; 0
    2052:	b0 e4       	ldi	r27, 0x40	; 64
    2054:	8b 87       	std	Y+11, r24	; 0x0b
    2056:	9c 87       	std	Y+12, r25	; 0x0c
    2058:	ad 87       	std	Y+13, r26	; 0x0d
    205a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205c:	6b 85       	ldd	r22, Y+11	; 0x0b
    205e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2060:	8d 85       	ldd	r24, Y+13	; 0x0d
    2062:	9e 85       	ldd	r25, Y+14	; 0x0e
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a ef       	ldi	r20, 0xFA	; 250
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	8f 83       	std	Y+7, r24	; 0x07
    2076:	98 87       	std	Y+8, r25	; 0x08
    2078:	a9 87       	std	Y+9, r26	; 0x09
    207a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207c:	6f 81       	ldd	r22, Y+7	; 0x07
    207e:	78 85       	ldd	r23, Y+8	; 0x08
    2080:	89 85       	ldd	r24, Y+9	; 0x09
    2082:	9a 85       	ldd	r25, Y+10	; 0x0a
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	40 e8       	ldi	r20, 0x80	; 128
    208a:	5f e3       	ldi	r21, 0x3F	; 63
    208c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2090:	88 23       	and	r24, r24
    2092:	2c f4       	brge	.+10     	; 0x209e <HLCD_VoidLcdClear+0x6c>
		__ticks = 1;
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	3f c0       	rjmp	.+126    	; 0x211c <HLCD_VoidLcdClear+0xea>
	else if (__tmp > 65535)
    209e:	6f 81       	ldd	r22, Y+7	; 0x07
    20a0:	78 85       	ldd	r23, Y+8	; 0x08
    20a2:	89 85       	ldd	r24, Y+9	; 0x09
    20a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	3f ef       	ldi	r19, 0xFF	; 255
    20aa:	4f e7       	ldi	r20, 0x7F	; 127
    20ac:	57 e4       	ldi	r21, 0x47	; 71
    20ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20b2:	18 16       	cp	r1, r24
    20b4:	4c f5       	brge	.+82     	; 0x2108 <HLCD_VoidLcdClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    20bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	40 e2       	ldi	r20, 0x20	; 32
    20c4:	51 e4       	ldi	r21, 0x41	; 65
    20c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	0f c0       	rjmp	.+30     	; 0x20fe <HLCD_VoidLcdClear+0xcc>
    20e0:	88 ec       	ldi	r24, 0xC8	; 200
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <HLCD_VoidLcdClear+0xba>
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2100:	9e 81       	ldd	r25, Y+6	; 0x06
    2102:	00 97       	sbiw	r24, 0x00	; 0
    2104:	69 f7       	brne	.-38     	; 0x20e0 <HLCD_VoidLcdClear+0xae>
    2106:	14 c0       	rjmp	.+40     	; 0x2130 <HLCD_VoidLcdClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2108:	6f 81       	ldd	r22, Y+7	; 0x07
    210a:	78 85       	ldd	r23, Y+8	; 0x08
    210c:	89 85       	ldd	r24, Y+9	; 0x09
    210e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2110:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	9e 83       	std	Y+6, r25	; 0x06
    211a:	8d 83       	std	Y+5, r24	; 0x05
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	9a 83       	std	Y+2, r25	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <HLCD_VoidLcdClear+0xf6>
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01

    // Delay to allow the LCD to process the command and clear the screen
    _delay_ms(2); // 2 ms is typically enough for clearing the screen
}
    2130:	2e 96       	adiw	r28, 0x0e	; 14
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	08 95       	ret

00002142 <HLCD_VoidLcdWriteInt>:
void HLCD_VoidLcdWriteInt(int Copy_u32Number)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	a0 97       	sbiw	r28, 0x20	; 32
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	98 a3       	std	Y+32, r25	; 0x20
    2158:	8f 8f       	std	Y+31, r24	; 0x1f
    char buffer[BUFFER_SIZE]; // Buffer to hold the converted string
    char temp[BUFFER_SIZE]; // Temporary buffer for reverse string
    int isNegative = 0; // Flag to check if number is negative
    215a:	1e 82       	std	Y+6, r1	; 0x06
    215c:	1d 82       	std	Y+5, r1	; 0x05
    int i = 0, j;
    215e:	1c 82       	std	Y+4, r1	; 0x04
    2160:	1b 82       	std	Y+3, r1	; 0x03

    // Check if the number is negative
    if (Copy_u32Number < 0)
    2162:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2164:	98 a1       	ldd	r25, Y+32	; 0x20
    2166:	99 23       	and	r25, r25
    2168:	5c f4       	brge	.+22     	; 0x2180 <HLCD_VoidLcdWriteInt+0x3e>
    {
        isNegative = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
        Copy_u32Number = -Copy_u32Number; // Make number positive
    2172:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2174:	98 a1       	ldd	r25, Y+32	; 0x20
    2176:	90 95       	com	r25
    2178:	81 95       	neg	r24
    217a:	9f 4f       	sbci	r25, 0xFF	; 255
    217c:	98 a3       	std	Y+32, r25	; 0x20
    217e:	8f 8f       	std	Y+31, r24	; 0x1f
    }

    // Convert integer to string
    do
    {
        buffer[i++] = (Copy_u32Number % 10) + '0'; // Get last digit
    2180:	eb 81       	ldd	r30, Y+3	; 0x03
    2182:	fc 81       	ldd	r31, Y+4	; 0x04
    2184:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2186:	98 a1       	ldd	r25, Y+32	; 0x20
    2188:	2a e0       	ldi	r18, 0x0A	; 10
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	b9 01       	movw	r22, r18
    218e:	0e 94 44 13 	call	0x2688	; 0x2688 <__divmodhi4>
    2192:	28 2f       	mov	r18, r24
    2194:	20 5d       	subi	r18, 0xD0	; 208
    2196:	ce 01       	movw	r24, r28
    2198:	07 96       	adiw	r24, 0x07	; 7
    219a:	e8 0f       	add	r30, r24
    219c:	f9 1f       	adc	r31, r25
    219e:	20 83       	st	Z, r18
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	9c 81       	ldd	r25, Y+4	; 0x04
    21a4:	01 96       	adiw	r24, 0x01	; 1
    21a6:	9c 83       	std	Y+4, r25	; 0x04
    21a8:	8b 83       	std	Y+3, r24	; 0x03
        Copy_u32Number /= 10; // Remove last digit
    21aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21ac:	98 a1       	ldd	r25, Y+32	; 0x20
    21ae:	2a e0       	ldi	r18, 0x0A	; 10
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	b9 01       	movw	r22, r18
    21b4:	0e 94 44 13 	call	0x2688	; 0x2688 <__divmodhi4>
    21b8:	cb 01       	movw	r24, r22
    21ba:	98 a3       	std	Y+32, r25	; 0x20
    21bc:	8f 8f       	std	Y+31, r24	; 0x1f
    } while (Copy_u32Number > 0);
    21be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21c0:	98 a1       	ldd	r25, Y+32	; 0x20
    21c2:	18 16       	cp	r1, r24
    21c4:	19 06       	cpc	r1, r25
    21c6:	e4 f2       	brlt	.-72     	; 0x2180 <HLCD_VoidLcdWriteInt+0x3e>

    // Add negative sign if needed
    if (isNegative)
    21c8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ca:	9e 81       	ldd	r25, Y+6	; 0x06
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	71 f0       	breq	.+28     	; 0x21ec <HLCD_VoidLcdWriteInt+0xaa>
    {
        buffer[i++] = '-';
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	ce 01       	movw	r24, r28
    21d6:	07 96       	adiw	r24, 0x07	; 7
    21d8:	fc 01       	movw	r30, r24
    21da:	e2 0f       	add	r30, r18
    21dc:	f3 1f       	adc	r31, r19
    21de:	8d e2       	ldi	r24, 0x2D	; 45
    21e0:	80 83       	st	Z, r24
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	01 96       	adiw	r24, 0x01	; 1
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	9e 01       	movw	r18, r28
    21f2:	29 5f       	subi	r18, 0xF9	; 249
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	f9 01       	movw	r30, r18
    21f8:	e8 0f       	add	r30, r24
    21fa:	f9 1f       	adc	r31, r25
    21fc:	10 82       	st	Z, r1
    for (j = 0; j < i; j++)
    21fe:	1a 82       	std	Y+2, r1	; 0x02
    2200:	19 82       	std	Y+1, r1	; 0x01
    2202:	1e c0       	rjmp	.+60     	; 0x2240 <HLCD_VoidLcdWriteInt+0xfe>
    {
        temp[j] = buffer[i - j - 1];
    2204:	49 81       	ldd	r20, Y+1	; 0x01
    2206:	5a 81       	ldd	r21, Y+2	; 0x02
    2208:	2b 81       	ldd	r18, Y+3	; 0x03
    220a:	3c 81       	ldd	r19, Y+4	; 0x04
    220c:	89 81       	ldd	r24, Y+1	; 0x01
    220e:	9a 81       	ldd	r25, Y+2	; 0x02
    2210:	b9 01       	movw	r22, r18
    2212:	68 1b       	sub	r22, r24
    2214:	79 0b       	sbc	r23, r25
    2216:	cb 01       	movw	r24, r22
    2218:	9c 01       	movw	r18, r24
    221a:	21 50       	subi	r18, 0x01	; 1
    221c:	30 40       	sbci	r19, 0x00	; 0
    221e:	ce 01       	movw	r24, r28
    2220:	07 96       	adiw	r24, 0x07	; 7
    2222:	fc 01       	movw	r30, r24
    2224:	e2 0f       	add	r30, r18
    2226:	f3 1f       	adc	r31, r19
    2228:	20 81       	ld	r18, Z
    222a:	ce 01       	movw	r24, r28
    222c:	43 96       	adiw	r24, 0x13	; 19
    222e:	fc 01       	movw	r30, r24
    2230:	e4 0f       	add	r30, r20
    2232:	f5 1f       	adc	r31, r21
    2234:	20 83       	st	Z, r18
        buffer[i++] = '-';
    }

    // Reverse the string
    buffer[i] = '\0'; // Null-terminate the string
    for (j = 0; j < i; j++)
    2236:	89 81       	ldd	r24, Y+1	; 0x01
    2238:	9a 81       	ldd	r25, Y+2	; 0x02
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	29 81       	ldd	r18, Y+1	; 0x01
    2242:	3a 81       	ldd	r19, Y+2	; 0x02
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	28 17       	cp	r18, r24
    224a:	39 07       	cpc	r19, r25
    224c:	dc f2       	brlt	.-74     	; 0x2204 <HLCD_VoidLcdWriteInt+0xc2>
    {
        temp[j] = buffer[i - j - 1];
    }
    temp[i] = '\0'; // Null-terminate the reversed string
    224e:	2b 81       	ldd	r18, Y+3	; 0x03
    2250:	3c 81       	ldd	r19, Y+4	; 0x04
    2252:	ce 01       	movw	r24, r28
    2254:	43 96       	adiw	r24, 0x13	; 19
    2256:	fc 01       	movw	r30, r24
    2258:	e2 0f       	add	r30, r18
    225a:	f3 1f       	adc	r31, r19
    225c:	10 82       	st	Z, r1

    // Write the string to the LCD
    HLCD_u8WriteStr(temp);
    225e:	ce 01       	movw	r24, r28
    2260:	43 96       	adiw	r24, 0x13	; 19
    2262:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <HLCD_u8WriteStr>
}
    2266:	a0 96       	adiw	r28, 0x20	; 32
    2268:	0f b6       	in	r0, 0x3f	; 63
    226a:	f8 94       	cli
    226c:	de bf       	out	0x3e, r29	; 62
    226e:	0f be       	out	0x3f, r0	; 63
    2270:	cd bf       	out	0x3d, r28	; 61
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <HLCD_VoidCreateSpecialChar>:
/* 1- Sned Command to set CGRAM Address */
/* Draw 1 Special Char into First Char in CGRAM*/

/* Function to store special characters in CGRAM and display them at the current cursor position */
void HLCD_VoidCreateSpecialChar(u8 Copy_u8Pattern[], u8 Copy_u8CGRAMIndex)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <HLCD_VoidCreateSpecialChar+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <HLCD_VoidCreateSpecialChar+0x8>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9b 83       	std	Y+3, r25	; 0x03
    2286:	8a 83       	std	Y+2, r24	; 0x02
    2288:	6c 83       	std	Y+4, r22	; 0x04
    /* 1. Set CGRAM address command (0x40 + (index * 8)) */
    HLCD_VoidLcdWriteCmd(0x40 + (Copy_u8CGRAMIndex * 8));
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	08 96       	adiw	r24, 0x08	; 8
    2292:	88 0f       	add	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	88 0f       	add	r24, r24
    2298:	99 1f       	adc	r25, r25
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>

    /* 2. Write the 8-byte pattern to CGRAM */
    for (u8 i = 0; i < 8; i++)
    22a2:	19 82       	std	Y+1, r1	; 0x01
    22a4:	0e c0       	rjmp	.+28     	; 0x22c2 <HLCD_VoidCreateSpecialChar+0x4a>
    {
        HLCD_VoidLcdWriteChar(Copy_u8Pattern[i]);
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	9b 81       	ldd	r25, Y+3	; 0x03
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	80 81       	ld	r24, Z
    22b8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
{
    /* 1. Set CGRAM address command (0x40 + (index * 8)) */
    HLCD_VoidLcdWriteCmd(0x40 + (Copy_u8CGRAMIndex * 8));

    /* 2. Write the 8-byte pattern to CGRAM */
    for (u8 i = 0; i < 8; i++)
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	8f 5f       	subi	r24, 0xFF	; 255
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	88 30       	cpi	r24, 0x08	; 8
    22c6:	78 f3       	brcs	.-34     	; 0x22a6 <HLCD_VoidCreateSpecialChar+0x2e>
    {
        HLCD_VoidLcdWriteChar(Copy_u8Pattern[i]);
    }

    /* 3. Return to DDRAM (write mode) and display the special character */
    HLCD_VoidLcdWriteChar(Copy_u8CGRAMIndex);
    22c8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ca:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
}
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	cf 91       	pop	r28
    22d8:	df 91       	pop	r29
    22da:	08 95       	ret

000022dc <HLCD_VoidWriteSpecialCharString>:
/* Function to write a string of special characters to the LCD */
void HLCD_VoidWriteSpecialCharString(u8 Copy_u8CGRAMIndices[], u8 Copy_u8Length)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <HLCD_VoidWriteSpecialCharString+0x6>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <HLCD_VoidWriteSpecialCharString+0x8>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	9b 83       	std	Y+3, r25	; 0x03
    22ea:	8a 83       	std	Y+2, r24	; 0x02
    22ec:	6c 83       	std	Y+4, r22	; 0x04
    /* Loop through the array of CGRAM indices */
    for (u8 i = 0; i < Copy_u8Length; i++)
    22ee:	19 82       	std	Y+1, r1	; 0x01
    22f0:	0e c0       	rjmp	.+28     	; 0x230e <HLCD_VoidWriteSpecialCharString+0x32>
    {
        /* Write each special character from CGRAM to the current cursor position */
        HLCD_VoidLcdWriteChar(Copy_u8CGRAMIndices[i]);
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	fc 01       	movw	r30, r24
    22fe:	e2 0f       	add	r30, r18
    2300:	f3 1f       	adc	r31, r19
    2302:	80 81       	ld	r24, Z
    2304:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
}
/* Function to write a string of special characters to the LCD */
void HLCD_VoidWriteSpecialCharString(u8 Copy_u8CGRAMIndices[], u8 Copy_u8Length)
{
    /* Loop through the array of CGRAM indices */
    for (u8 i = 0; i < Copy_u8Length; i++)
    2308:	89 81       	ldd	r24, Y+1	; 0x01
    230a:	8f 5f       	subi	r24, 0xFF	; 255
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	99 81       	ldd	r25, Y+1	; 0x01
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	98 17       	cp	r25, r24
    2314:	70 f3       	brcs	.-36     	; 0x22f2 <HLCD_VoidWriteSpecialCharString+0x16>
    {
        /* Write each special character from CGRAM to the current cursor position */
        HLCD_VoidLcdWriteChar(Copy_u8CGRAMIndices[i]);
    }
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <main>:
#define C_CPU 8000000Ul

void HLCD_VoidWriteAhmad(void);

int main(int argc, char **argv)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	a1 97       	sbiw	r28, 0x21	; 33
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	9f 8f       	std	Y+31, r25	; 0x1f
    233a:	8e 8f       	std	Y+30, r24	; 0x1e
    233c:	79 a3       	std	Y+33, r23	; 0x21
    233e:	68 a3       	std	Y+32, r22	; 0x20
    MDIO_IntialPins();
    2340:	0e 94 47 06 	call	0xc8e	; 0xc8e <MDIO_IntialPins>
    HLCD_VoidLcdIint();
    2344:	0e 94 05 0b 	call	0x160a	; 0x160a <HLCD_VoidLcdIint>
    HLCD_VoidWriteAhmad();
    2348:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <HLCD_VoidWriteAhmad>
    u8 Local_u8Counter = 0;
    234c:	1d 8e       	std	Y+29, r1	; 0x1d
    while (1)
    {

        if (Local_u8Counter % 2 == EVEN_NUMBER)
    234e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2350:	88 2f       	mov	r24, r24
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	81 70       	andi	r24, 0x01	; 1
    2356:	90 70       	andi	r25, 0x00	; 0
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	09 f0       	breq	.+2      	; 0x235e <main+0x3a>
    235c:	8d c0       	rjmp	.+282    	; 0x2478 <main+0x154>
        {
            HLCD_VoidSetCurser(HLCD_LINE_1, Local_u8Counter);
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2362:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <HLCD_VoidSetCurser>
            HLCD_u8WriteStr("Ahmed");
    2366:	80 e6       	ldi	r24, 0x60	; 96
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <HLCD_u8WriteStr>
            HLCD_VoidSetCurser(HLCD_LINE_2, Local_u8Counter);
    236e:	82 e0       	ldi	r24, 0x02	; 2
    2370:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2372:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <HLCD_VoidSetCurser>
            HLCD_VoidLcdWriteChar(3);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
            HLCD_VoidLcdWriteChar(2);
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
            HLCD_VoidLcdWriteChar(1);
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
            HLCD_VoidLcdWriteChar(0);
    2388:	80 e0       	ldi	r24, 0x00	; 0
    238a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	aa ef       	ldi	r26, 0xFA	; 250
    2394:	b3 e4       	ldi	r27, 0x43	; 67
    2396:	89 8f       	std	Y+25, r24	; 0x19
    2398:	9a 8f       	std	Y+26, r25	; 0x1a
    239a:	ab 8f       	std	Y+27, r26	; 0x1b
    239c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239e:	69 8d       	ldd	r22, Y+25	; 0x19
    23a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	4a ef       	ldi	r20, 0xFA	; 250
    23ac:	54 e4       	ldi	r21, 0x44	; 68
    23ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	8d 8b       	std	Y+21, r24	; 0x15
    23b8:	9e 8b       	std	Y+22, r25	; 0x16
    23ba:	af 8b       	std	Y+23, r26	; 0x17
    23bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e8       	ldi	r20, 0x80	; 128
    23cc:	5f e3       	ldi	r21, 0x3F	; 63
    23ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23d2:	88 23       	and	r24, r24
    23d4:	2c f4       	brge	.+10     	; 0x23e0 <main+0xbc>
		__ticks = 1;
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	9c 8b       	std	Y+20, r25	; 0x14
    23dc:	8b 8b       	std	Y+19, r24	; 0x13
    23de:	3f c0       	rjmp	.+126    	; 0x245e <main+0x13a>
	else if (__tmp > 65535)
    23e0:	6d 89       	ldd	r22, Y+21	; 0x15
    23e2:	7e 89       	ldd	r23, Y+22	; 0x16
    23e4:	8f 89       	ldd	r24, Y+23	; 0x17
    23e6:	98 8d       	ldd	r25, Y+24	; 0x18
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	3f ef       	ldi	r19, 0xFF	; 255
    23ec:	4f e7       	ldi	r20, 0x7F	; 127
    23ee:	57 e4       	ldi	r21, 0x47	; 71
    23f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23f4:	18 16       	cp	r1, r24
    23f6:	4c f5       	brge	.+82     	; 0x244a <main+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f8:	69 8d       	ldd	r22, Y+25	; 0x19
    23fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e2       	ldi	r20, 0x20	; 32
    2406:	51 e4       	ldi	r21, 0x41	; 65
    2408:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	bc 01       	movw	r22, r24
    2412:	cd 01       	movw	r24, r26
    2414:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	0f c0       	rjmp	.+30     	; 0x2440 <main+0x11c>
    2422:	88 ec       	ldi	r24, 0xC8	; 200
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
    242a:	89 89       	ldd	r24, Y+17	; 0x11
    242c:	9a 89       	ldd	r25, Y+18	; 0x12
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <main+0x10a>
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2436:	8b 89       	ldd	r24, Y+19	; 0x13
    2438:	9c 89       	ldd	r25, Y+20	; 0x14
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	9c 8b       	std	Y+20, r25	; 0x14
    243e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2440:	8b 89       	ldd	r24, Y+19	; 0x13
    2442:	9c 89       	ldd	r25, Y+20	; 0x14
    2444:	00 97       	sbiw	r24, 0x00	; 0
    2446:	69 f7       	brne	.-38     	; 0x2422 <main+0xfe>
    2448:	14 c0       	rjmp	.+40     	; 0x2472 <main+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    244a:	6d 89       	ldd	r22, Y+21	; 0x15
    244c:	7e 89       	ldd	r23, Y+22	; 0x16
    244e:	8f 89       	ldd	r24, Y+23	; 0x17
    2450:	98 8d       	ldd	r25, Y+24	; 0x18
    2452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	9c 8b       	std	Y+20, r25	; 0x14
    245c:	8b 8b       	std	Y+19, r24	; 0x13
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f
    2466:	8f 85       	ldd	r24, Y+15	; 0x0f
    2468:	98 89       	ldd	r25, Y+16	; 0x10
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <main+0x146>
    246e:	98 8b       	std	Y+16, r25	; 0x10
    2470:	8f 87       	std	Y+15, r24	; 0x0f
            _delay_ms(500);
            HLCD_VoidLcdClear();
    2472:	0e 94 19 10 	call	0x2032	; 0x2032 <HLCD_VoidLcdClear>
    2476:	8c c0       	rjmp	.+280    	; 0x2590 <main+0x26c>
        }
        else
        {
            HLCD_VoidSetCurser(HLCD_LINE_2, Local_u8Counter);
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    247c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <HLCD_VoidSetCurser>
            HLCD_u8WriteStr("Ahmed");
    2480:	80 e6       	ldi	r24, 0x60	; 96
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <HLCD_u8WriteStr>
            HLCD_VoidSetCurser(HLCD_LINE_1, Local_u8Counter);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    248c:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <HLCD_VoidSetCurser>
            HLCD_VoidLcdWriteChar(3);
    2490:	83 e0       	ldi	r24, 0x03	; 3
    2492:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
            HLCD_VoidLcdWriteChar(2);
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
            HLCD_VoidLcdWriteChar(1);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
            HLCD_VoidLcdWriteChar(0);
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	aa ef       	ldi	r26, 0xFA	; 250
    24ae:	b3 e4       	ldi	r27, 0x43	; 67
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	ad 87       	std	Y+13, r26	; 0x0d
    24b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8f 83       	std	Y+7, r24	; 0x07
    24d2:	98 87       	std	Y+8, r25	; 0x08
    24d4:	a9 87       	std	Y+9, r26	; 0x09
    24d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <main+0x1d6>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <main+0x254>
	else if (__tmp > 65535)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <main+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	0f c0       	rjmp	.+30     	; 0x255a <main+0x236>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <main+0x224>
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <main+0x218>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <main+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <main+0x260>
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(500);
            HLCD_VoidLcdClear();
    258c:	0e 94 19 10 	call	0x2032	; 0x2032 <HLCD_VoidLcdClear>
        }
        Local_u8Counter += OFFSET_VALUE;
    2590:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2592:	8d 5f       	subi	r24, 0xFD	; 253
    2594:	8d 8f       	std	Y+29, r24	; 0x1d
        if (Local_u8Counter >= COUNTER_LIMIT)
    2596:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2598:	8a 30       	cpi	r24, 0x0A	; 10
    259a:	08 f4       	brcc	.+2      	; 0x259e <main+0x27a>
    259c:	d8 ce       	rjmp	.-592    	; 0x234e <main+0x2a>
        {
            Local_u8Counter = 0;
    259e:	1d 8e       	std	Y+29, r1	; 0x1d
    25a0:	d6 ce       	rjmp	.-596    	; 0x234e <main+0x2a>

000025a2 <HLCD_VoidWriteAhmad>:
        }
    }
}

void HLCD_VoidWriteAhmad(void)
{
    25a2:	df 93       	push	r29
    25a4:	cf 93       	push	r28
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    /* 1- Draw "أ" (Alef with Hamza) */
    HLCD_VoidLcdWriteCmd(0x40 + (8 * 0)); // Set CGRAM address for first character
    25aa:	80 e4       	ldi	r24, 0x40	; 64
    25ac:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    HLCD_VoidLcdWriteChar(0B01111);       // Row 1
    25b0:	8f e0       	ldi	r24, 0x0F	; 15
    25b2:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B01010);       // Row 2
    25b6:	8a e0       	ldi	r24, 0x0A	; 10
    25b8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B11111);       // Row 3
    25bc:	8f e1       	ldi	r24, 0x1F	; 31
    25be:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B00100);       // Row 4
    25c2:	84 e0       	ldi	r24, 0x04	; 4
    25c4:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B00100);       // Row 5
    25c8:	84 e0       	ldi	r24, 0x04	; 4
    25ca:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B00100);       // Row 6
    25ce:	84 e0       	ldi	r24, 0x04	; 4
    25d0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B00100);       // Row 7
    25d4:	84 e0       	ldi	r24, 0x04	; 4
    25d6:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0B00100);       // Row 8
    25da:	84 e0       	ldi	r24, 0x04	; 4
    25dc:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>

    /* 2- Draw "ح" (Haa) */
    HLCD_VoidLcdWriteCmd(0x40 + (8 * 1)); // Set CGRAM address for second character
    25e0:	88 e4       	ldi	r24, 0x48	; 72
    25e2:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    HLCD_VoidLcdWriteChar(0x18);       // Row 1
    25e6:	88 e1       	ldi	r24, 0x18	; 24
    25e8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x0E);       // Row 2
    25ec:	8e e0       	ldi	r24, 0x0E	; 14
    25ee:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x07);       // Row 3
    25f2:	87 e0       	ldi	r24, 0x07	; 7
    25f4:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x03);       // Row 4
    25f8:	83 e0       	ldi	r24, 0x03	; 3
    25fa:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x1F);       // Row 5
    25fe:	8f e1       	ldi	r24, 0x1F	; 31
    2600:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x1F);       // Row 6
    2604:	8f e1       	ldi	r24, 0x1F	; 31
    2606:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 7
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 8
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>

    /* 3- Draw "م" (Meem) */
    HLCD_VoidLcdWriteCmd(0x40 + (8 * 2)); // Set CGRAM address for third character
    2616:	80 e5       	ldi	r24, 0x50	; 80
    2618:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    HLCD_VoidLcdWriteChar(0x00);       // Row 1
    261c:	80 e0       	ldi	r24, 0x00	; 0
    261e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 2
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 3
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 4
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x1F);       // Row 5
    2634:	8f e1       	ldi	r24, 0x1F	; 31
    2636:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x1F);       // Row 6
    263a:	8f e1       	ldi	r24, 0x1F	; 31
    263c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x0A);       // Row 7
    2640:	8a e0       	ldi	r24, 0x0A	; 10
    2642:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x0E);       // Row 8
    2646:	8e e0       	ldi	r24, 0x0E	; 14
    2648:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>

    /* 4- Draw "د" (Dal) */
    HLCD_VoidLcdWriteCmd(0x40 + (8 * 3)); // Set CGRAM address for fourth character
    264c:	88 e5       	ldi	r24, 0x58	; 88
    264e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <HLCD_VoidLcdWriteCmd>
    HLCD_VoidLcdWriteChar(0x00);       // Row 1
    2652:	80 e0       	ldi	r24, 0x00	; 0
    2654:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x03);       // Row 2
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x03);       // Row 3
    265e:	83 e0       	ldi	r24, 0x03	; 3
    2660:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x03);       // Row 4
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x1F);       // Row 5
    266a:	8f e1       	ldi	r24, 0x1F	; 31
    266c:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x1F);       // Row 6
    2670:	8f e1       	ldi	r24, 0x1F	; 31
    2672:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 7
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
    HLCD_VoidLcdWriteChar(0x00);       // Row 8
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <HLCD_VoidLcdWriteChar>
}
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <__divmodhi4>:
    2688:	97 fb       	bst	r25, 7
    268a:	09 2e       	mov	r0, r25
    268c:	07 26       	eor	r0, r23
    268e:	0a d0       	rcall	.+20     	; 0x26a4 <__divmodhi4_neg1>
    2690:	77 fd       	sbrc	r23, 7
    2692:	04 d0       	rcall	.+8      	; 0x269c <__divmodhi4_neg2>
    2694:	0c d0       	rcall	.+24     	; 0x26ae <__udivmodhi4>
    2696:	06 d0       	rcall	.+12     	; 0x26a4 <__divmodhi4_neg1>
    2698:	00 20       	and	r0, r0
    269a:	1a f4       	brpl	.+6      	; 0x26a2 <__divmodhi4_exit>

0000269c <__divmodhi4_neg2>:
    269c:	70 95       	com	r23
    269e:	61 95       	neg	r22
    26a0:	7f 4f       	sbci	r23, 0xFF	; 255

000026a2 <__divmodhi4_exit>:
    26a2:	08 95       	ret

000026a4 <__divmodhi4_neg1>:
    26a4:	f6 f7       	brtc	.-4      	; 0x26a2 <__divmodhi4_exit>
    26a6:	90 95       	com	r25
    26a8:	81 95       	neg	r24
    26aa:	9f 4f       	sbci	r25, 0xFF	; 255
    26ac:	08 95       	ret

000026ae <__udivmodhi4>:
    26ae:	aa 1b       	sub	r26, r26
    26b0:	bb 1b       	sub	r27, r27
    26b2:	51 e1       	ldi	r21, 0x11	; 17
    26b4:	07 c0       	rjmp	.+14     	; 0x26c4 <__udivmodhi4_ep>

000026b6 <__udivmodhi4_loop>:
    26b6:	aa 1f       	adc	r26, r26
    26b8:	bb 1f       	adc	r27, r27
    26ba:	a6 17       	cp	r26, r22
    26bc:	b7 07       	cpc	r27, r23
    26be:	10 f0       	brcs	.+4      	; 0x26c4 <__udivmodhi4_ep>
    26c0:	a6 1b       	sub	r26, r22
    26c2:	b7 0b       	sbc	r27, r23

000026c4 <__udivmodhi4_ep>:
    26c4:	88 1f       	adc	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	5a 95       	dec	r21
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <__udivmodhi4_loop>
    26cc:	80 95       	com	r24
    26ce:	90 95       	com	r25
    26d0:	bc 01       	movw	r22, r24
    26d2:	cd 01       	movw	r24, r26
    26d4:	08 95       	ret

000026d6 <__prologue_saves__>:
    26d6:	2f 92       	push	r2
    26d8:	3f 92       	push	r3
    26da:	4f 92       	push	r4
    26dc:	5f 92       	push	r5
    26de:	6f 92       	push	r6
    26e0:	7f 92       	push	r7
    26e2:	8f 92       	push	r8
    26e4:	9f 92       	push	r9
    26e6:	af 92       	push	r10
    26e8:	bf 92       	push	r11
    26ea:	cf 92       	push	r12
    26ec:	df 92       	push	r13
    26ee:	ef 92       	push	r14
    26f0:	ff 92       	push	r15
    26f2:	0f 93       	push	r16
    26f4:	1f 93       	push	r17
    26f6:	cf 93       	push	r28
    26f8:	df 93       	push	r29
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	ca 1b       	sub	r28, r26
    2700:	db 0b       	sbc	r29, r27
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	09 94       	ijmp

0000270e <__epilogue_restores__>:
    270e:	2a 88       	ldd	r2, Y+18	; 0x12
    2710:	39 88       	ldd	r3, Y+17	; 0x11
    2712:	48 88       	ldd	r4, Y+16	; 0x10
    2714:	5f 84       	ldd	r5, Y+15	; 0x0f
    2716:	6e 84       	ldd	r6, Y+14	; 0x0e
    2718:	7d 84       	ldd	r7, Y+13	; 0x0d
    271a:	8c 84       	ldd	r8, Y+12	; 0x0c
    271c:	9b 84       	ldd	r9, Y+11	; 0x0b
    271e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2720:	b9 84       	ldd	r11, Y+9	; 0x09
    2722:	c8 84       	ldd	r12, Y+8	; 0x08
    2724:	df 80       	ldd	r13, Y+7	; 0x07
    2726:	ee 80       	ldd	r14, Y+6	; 0x06
    2728:	fd 80       	ldd	r15, Y+5	; 0x05
    272a:	0c 81       	ldd	r16, Y+4	; 0x04
    272c:	1b 81       	ldd	r17, Y+3	; 0x03
    272e:	aa 81       	ldd	r26, Y+2	; 0x02
    2730:	b9 81       	ldd	r27, Y+1	; 0x01
    2732:	ce 0f       	add	r28, r30
    2734:	d1 1d       	adc	r29, r1
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
    2740:	ed 01       	movw	r28, r26
    2742:	08 95       	ret

00002744 <_exit>:
    2744:	f8 94       	cli

00002746 <__stop_program>:
    2746:	ff cf       	rjmp	.-2      	; 0x2746 <__stop_program>
